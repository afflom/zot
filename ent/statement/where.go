// Code generated by ent, DO NOT EDIT.

package statement

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"zotregistry.io/zot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldID, id))
}

// MediaType applies equality check predicate on the "mediaType" field. It's identical to MediaTypeEQ.
func MediaType(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldMediaType, v))
}

// MediaTypeEQ applies the EQ predicate on the "mediaType" field.
func MediaTypeEQ(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldMediaType, v))
}

// MediaTypeNEQ applies the NEQ predicate on the "mediaType" field.
func MediaTypeNEQ(v string) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldMediaType, v))
}

// MediaTypeIn applies the In predicate on the "mediaType" field.
func MediaTypeIn(vs ...string) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldMediaType, vs...))
}

// MediaTypeNotIn applies the NotIn predicate on the "mediaType" field.
func MediaTypeNotIn(vs ...string) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldMediaType, vs...))
}

// MediaTypeGT applies the GT predicate on the "mediaType" field.
func MediaTypeGT(v string) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldMediaType, v))
}

// MediaTypeGTE applies the GTE predicate on the "mediaType" field.
func MediaTypeGTE(v string) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldMediaType, v))
}

// MediaTypeLT applies the LT predicate on the "mediaType" field.
func MediaTypeLT(v string) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldMediaType, v))
}

// MediaTypeLTE applies the LTE predicate on the "mediaType" field.
func MediaTypeLTE(v string) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldMediaType, v))
}

// MediaTypeContains applies the Contains predicate on the "mediaType" field.
func MediaTypeContains(v string) predicate.Statement {
	return predicate.Statement(sql.FieldContains(FieldMediaType, v))
}

// MediaTypeHasPrefix applies the HasPrefix predicate on the "mediaType" field.
func MediaTypeHasPrefix(v string) predicate.Statement {
	return predicate.Statement(sql.FieldHasPrefix(FieldMediaType, v))
}

// MediaTypeHasSuffix applies the HasSuffix predicate on the "mediaType" field.
func MediaTypeHasSuffix(v string) predicate.Statement {
	return predicate.Statement(sql.FieldHasSuffix(FieldMediaType, v))
}

// MediaTypeEqualFold applies the EqualFold predicate on the "mediaType" field.
func MediaTypeEqualFold(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEqualFold(FieldMediaType, v))
}

// MediaTypeContainsFold applies the ContainsFold predicate on the "mediaType" field.
func MediaTypeContainsFold(v string) predicate.Statement {
	return predicate.Statement(sql.FieldContainsFold(FieldMediaType, v))
}

// HasObjects applies the HasEdge predicate on the "objects" edge.
func HasObjects() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ObjectsTable, ObjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasObjectsWith applies the HasEdge predicate on the "objects" edge with a given conditions (other predicates).
func HasObjectsWith(preds ...predicate.Element) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := newObjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPredicates applies the HasEdge predicate on the "predicates" edge.
func HasPredicates() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PredicatesTable, PredicatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPredicatesWith applies the HasEdge predicate on the "predicates" edge with a given conditions (other predicates).
func HasPredicatesWith(preds ...predicate.Element) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := newPredicatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubjects applies the HasEdge predicate on the "subjects" edge.
func HasSubjects() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubjectsTable, SubjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectsWith applies the HasEdge predicate on the "subjects" edge with a given conditions (other predicates).
func HasSubjectsWith(preds ...predicate.Element) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := newSubjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatements applies the HasEdge predicate on the "statements" edge.
func HasStatements() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatementsTable, StatementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatementsWith applies the HasEdge predicate on the "statements" edge with a given conditions (other predicates).
func HasStatementsWith(preds ...predicate.Element) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := newStatementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Statement) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Statement) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Statement) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		p(s.Not())
	})
}
