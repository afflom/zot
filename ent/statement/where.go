// Code generated by ent, DO NOT EDIT.

package statement

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"zotregistry.io/zot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.Statement {
	return predicate.Statement(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.Statement {
	return predicate.Statement(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.Statement {
	return predicate.Statement(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.Statement {
	return predicate.Statement(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.Statement {
	return predicate.Statement(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.Statement {
	return predicate.Statement(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.Statement {
	return predicate.Statement(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.Statement {
	return predicate.Statement(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.Statement {
	return predicate.Statement(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.Statement {
	return predicate.Statement(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.Statement {
	return predicate.Statement(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.Statement {
	return predicate.Statement(sql.FieldContainsFold(FieldNamespace, v))
}

// HasObjects applies the HasEdge predicate on the "objects" edge.
func HasObjects() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ObjectsTable, ObjectsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasObjectsWith applies the HasEdge predicate on the "objects" edge with a given conditions (other predicates).
func HasObjectsWith(preds ...predicate.Object) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := newObjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPredicates applies the HasEdge predicate on the "predicates" edge.
func HasPredicates() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PredicatesTable, PredicatesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPredicatesWith applies the HasEdge predicate on the "predicates" edge with a given conditions (other predicates).
func HasPredicatesWith(preds ...predicate.Spredicate) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := newPredicatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubjects applies the HasEdge predicate on the "subjects" edge.
func HasSubjects() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SubjectsTable, SubjectsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectsWith applies the HasEdge predicate on the "subjects" edge with a given conditions (other predicates).
func HasSubjectsWith(preds ...predicate.Subject) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := newSubjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Statement) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Statement) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Statement) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		p(s.Not())
	})
}
