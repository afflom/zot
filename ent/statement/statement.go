// Code generated by ent, DO NOT EDIT.

package statement

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the statement type in the database.
	Label = "statement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldStatement holds the string denoting the statement field in the database.
	FieldStatement = "statement"
	// EdgeObjects holds the string denoting the objects edge name in mutations.
	EdgeObjects = "objects"
	// EdgePredicates holds the string denoting the predicates edge name in mutations.
	EdgePredicates = "predicates"
	// EdgeSubjects holds the string denoting the subjects edge name in mutations.
	EdgeSubjects = "subjects"
	// Table holds the table name of the statement in the database.
	Table = "statements"
	// ObjectsTable is the table that holds the objects relation/edge. The primary key declared below.
	ObjectsTable = "statement_objects"
	// ObjectsInverseTable is the table name for the Object entity.
	// It exists in this package in order to avoid circular dependency with the "object" package.
	ObjectsInverseTable = "objects"
	// PredicatesTable is the table that holds the predicates relation/edge. The primary key declared below.
	PredicatesTable = "statement_predicates"
	// PredicatesInverseTable is the table name for the Spredicate entity.
	// It exists in this package in order to avoid circular dependency with the "spredicate" package.
	PredicatesInverseTable = "spredicates"
	// SubjectsTable is the table that holds the subjects relation/edge. The primary key declared below.
	SubjectsTable = "statement_subjects"
	// SubjectsInverseTable is the table name for the Subject entity.
	// It exists in this package in order to avoid circular dependency with the "subject" package.
	SubjectsInverseTable = "subjects"
)

// Columns holds all SQL columns for statement fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldStatement,
}

var (
	// ObjectsPrimaryKey and ObjectsColumn2 are the table columns denoting the
	// primary key for the objects relation (M2M).
	ObjectsPrimaryKey = []string{"statement_id", "object_id"}
	// PredicatesPrimaryKey and PredicatesColumn2 are the table columns denoting the
	// primary key for the predicates relation (M2M).
	PredicatesPrimaryKey = []string{"statement_id", "spredicate_id"}
	// SubjectsPrimaryKey and SubjectsColumn2 are the table columns denoting the
	// primary key for the subjects relation (M2M).
	SubjectsPrimaryKey = []string{"statement_id", "subject_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Statement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByObjectsCount orders the results by objects count.
func ByObjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newObjectsStep(), opts...)
	}
}

// ByObjects orders the results by objects terms.
func ByObjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newObjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPredicatesCount orders the results by predicates count.
func ByPredicatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPredicatesStep(), opts...)
	}
}

// ByPredicates orders the results by predicates terms.
func ByPredicates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPredicatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubjectsCount orders the results by subjects count.
func BySubjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubjectsStep(), opts...)
	}
}

// BySubjects orders the results by subjects terms.
func BySubjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newObjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ObjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ObjectsTable, ObjectsPrimaryKey...),
	)
}
func newPredicatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PredicatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PredicatesTable, PredicatesPrimaryKey...),
	)
}
func newSubjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SubjectsTable, SubjectsPrimaryKey...),
	)
}
