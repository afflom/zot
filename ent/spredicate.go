// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"zotregistry.io/zot/ent/spredicate"
)

// Spredicate is the model entity for the Spredicate schema.
type Spredicate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PredicateType holds the value of the "predicateType" field.
	PredicateType string `json:"predicateType,omitempty"`
	// Predicate holds the value of the "predicate" field.
	Predicate map[string]interface{} `json:"predicate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpredicateQuery when eager-loading is set.
	Edges        SpredicateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SpredicateEdges holds the relations/edges for other nodes in the graph.
type SpredicateEdges struct {
	// Statement holds the value of the statement edge.
	Statement []*Statement `json:"statement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedStatement map[string][]*Statement
}

// StatementOrErr returns the Statement value or an error if the edge
// was not loaded in eager-loading.
func (e SpredicateEdges) StatementOrErr() ([]*Statement, error) {
	if e.loadedTypes[0] {
		return e.Statement, nil
	}
	return nil, &NotLoadedError{edge: "statement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Spredicate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spredicate.FieldPredicate:
			values[i] = new([]byte)
		case spredicate.FieldID:
			values[i] = new(sql.NullInt64)
		case spredicate.FieldPredicateType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Spredicate fields.
func (s *Spredicate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spredicate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case spredicate.FieldPredicateType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field predicateType", values[i])
			} else if value.Valid {
				s.PredicateType = value.String
			}
		case spredicate.FieldPredicate:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field predicate", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Predicate); err != nil {
					return fmt.Errorf("unmarshal field predicate: %w", err)
				}
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Spredicate.
// This includes values selected through modifiers, order, etc.
func (s *Spredicate) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryStatement queries the "statement" edge of the Spredicate entity.
func (s *Spredicate) QueryStatement() *StatementQuery {
	return NewSpredicateClient(s.config).QueryStatement(s)
}

// Update returns a builder for updating this Spredicate.
// Note that you need to call Spredicate.Unwrap() before calling this method if this Spredicate
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Spredicate) Update() *SpredicateUpdateOne {
	return NewSpredicateClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Spredicate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Spredicate) Unwrap() *Spredicate {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Spredicate is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Spredicate) String() string {
	var builder strings.Builder
	builder.WriteString("Spredicate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("predicateType=")
	builder.WriteString(s.PredicateType)
	builder.WriteString(", ")
	builder.WriteString("predicate=")
	builder.WriteString(fmt.Sprintf("%v", s.Predicate))
	builder.WriteByte(')')
	return builder.String()
}

// NamedStatement returns the Statement named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Spredicate) NamedStatement(name string) ([]*Statement, error) {
	if s.Edges.namedStatement == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedStatement[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Spredicate) appendNamedStatement(name string, edges ...*Statement) {
	if s.Edges.namedStatement == nil {
		s.Edges.namedStatement = make(map[string][]*Statement)
	}
	if len(edges) == 0 {
		s.Edges.namedStatement[name] = []*Statement{}
	} else {
		s.Edges.namedStatement[name] = append(s.Edges.namedStatement[name], edges...)
	}
}

// Spredicates is a parsable slice of Spredicate.
type Spredicates []*Spredicate
