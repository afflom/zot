// Code generated by ent, DO NOT EDIT.

package resource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the resource type in the database.
	Label = "resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// EdgeElements holds the string denoting the elements edge name in mutations.
	EdgeElements = "elements"
	// Table holds the table name of the resource in the database.
	Table = "resources"
	// ElementsTable is the table that holds the elements relation/edge.
	ElementsTable = "elements"
	// ElementsInverseTable is the table name for the Element entity.
	// It exists in this package in order to avoid circular dependency with the "element" package.
	ElementsInverseTable = "elements"
	// ElementsColumn is the table column denoting the elements relation/edge.
	ElementsColumn = "resource_elements"
)

// Columns holds all SQL columns for resource fields.
var Columns = []string{
	FieldID,
	FieldMessage,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"element_resources",
	"element_locations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Resource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByElementsCount orders the results by elements count.
func ByElementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newElementsStep(), opts...)
	}
}

// ByElements orders the results by elements terms.
func ByElements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newElementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newElementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ElementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ElementsTable, ElementsColumn),
	)
}
