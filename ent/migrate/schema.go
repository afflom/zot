// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ElementsColumns holds the columns for the "elements" table.
	ElementsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "resource_type", Type: field.TypeString},
		{Name: "locator_type", Type: field.TypeString},
		{Name: "resource_elements", Type: field.TypeInt, Nullable: true},
		{Name: "statement_objects", Type: field.TypeInt, Nullable: true},
		{Name: "statement_predicates", Type: field.TypeInt, Nullable: true},
		{Name: "statement_subjects", Type: field.TypeInt, Nullable: true},
		{Name: "statement_statements", Type: field.TypeInt, Nullable: true},
	}
	// ElementsTable holds the schema information for the "elements" table.
	ElementsTable = &schema.Table{
		Name:       "elements",
		Columns:    ElementsColumns,
		PrimaryKey: []*schema.Column{ElementsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "elements_resources_elements",
				Columns:    []*schema.Column{ElementsColumns[3]},
				RefColumns: []*schema.Column{ResourcesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "elements_statements_objects",
				Columns:    []*schema.Column{ElementsColumns[4]},
				RefColumns: []*schema.Column{StatementsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "elements_statements_predicates",
				Columns:    []*schema.Column{ElementsColumns[5]},
				RefColumns: []*schema.Column{StatementsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "elements_statements_subjects",
				Columns:    []*schema.Column{ElementsColumns[6]},
				RefColumns: []*schema.Column{StatementsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "elements_statements_statements",
				Columns:    []*schema.Column{ElementsColumns[7]},
				RefColumns: []*schema.Column{StatementsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ResourcesColumns holds the columns for the "resources" table.
	ResourcesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "message", Type: field.TypeJSON},
		{Name: "element_resources", Type: field.TypeInt, Nullable: true},
		{Name: "element_locations", Type: field.TypeInt, Nullable: true},
	}
	// ResourcesTable holds the schema information for the "resources" table.
	ResourcesTable = &schema.Table{
		Name:       "resources",
		Columns:    ResourcesColumns,
		PrimaryKey: []*schema.Column{ResourcesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "resources_elements_resources",
				Columns:    []*schema.Column{ResourcesColumns[2]},
				RefColumns: []*schema.Column{ElementsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "resources_elements_locations",
				Columns:    []*schema.Column{ResourcesColumns[3]},
				RefColumns: []*schema.Column{ElementsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// StatementsColumns holds the columns for the "statements" table.
	StatementsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "media_type", Type: field.TypeString},
		{Name: "element_statements", Type: field.TypeInt, Nullable: true},
	}
	// StatementsTable holds the schema information for the "statements" table.
	StatementsTable = &schema.Table{
		Name:       "statements",
		Columns:    StatementsColumns,
		PrimaryKey: []*schema.Column{StatementsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "statements_elements_statements",
				Columns:    []*schema.Column{StatementsColumns[2]},
				RefColumns: []*schema.Column{ElementsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ElementsTable,
		ResourcesTable,
		StatementsTable,
	}
)

func init() {
	ElementsTable.ForeignKeys[0].RefTable = ResourcesTable
	ElementsTable.ForeignKeys[1].RefTable = StatementsTable
	ElementsTable.ForeignKeys[2].RefTable = StatementsTable
	ElementsTable.ForeignKeys[3].RefTable = StatementsTable
	ElementsTable.ForeignKeys[4].RefTable = StatementsTable
	ResourcesTable.ForeignKeys[0].RefTable = ElementsTable
	ResourcesTable.ForeignKeys[1].RefTable = ElementsTable
	StatementsTable.ForeignKeys[0].RefTable = ElementsTable
}
