// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (e *Element) Statements(ctx context.Context) (result []*Statement, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedStatements(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.StatementsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryStatements().All(ctx)
	}
	return result, err
}

func (e *Element) Resources(ctx context.Context) (result []*Resource, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedResources(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.ResourcesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryResources().All(ctx)
	}
	return result, err
}

func (e *Element) Locations(ctx context.Context) (result []*Resource, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedLocations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.LocationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryLocations().All(ctx)
	}
	return result, err
}

func (r *Resource) Elements(ctx context.Context) (result []*Element, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedElements(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.ElementsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryElements().All(ctx)
	}
	return result, err
}

func (s *Statement) Objects(ctx context.Context) (result []*Element, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedObjects(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ObjectsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryObjects().All(ctx)
	}
	return result, err
}

func (s *Statement) Predicates(ctx context.Context) (result []*Element, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedPredicates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.PredicatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryPredicates().All(ctx)
	}
	return result, err
}

func (s *Statement) Subjects(ctx context.Context) (result []*Element, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedSubjects(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.SubjectsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QuerySubjects().All(ctx)
	}
	return result, err
}

func (s *Statement) Statements(ctx context.Context) (result []*Element, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedStatements(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.StatementsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryStatements().All(ctx)
	}
	return result, err
}
