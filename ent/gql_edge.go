// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (o *Object) Statement(ctx context.Context) (result []*Statement, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedStatement(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.StatementOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryStatement().All(ctx)
	}
	return result, err
}

func (s *Spredicate) Statement(ctx context.Context) (result []*Statement, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedStatement(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.StatementOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryStatement().All(ctx)
	}
	return result, err
}

func (s *Statement) Objects(ctx context.Context) (result []*Object, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedObjects(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ObjectsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryObjects().All(ctx)
	}
	return result, err
}

func (s *Statement) Predicates(ctx context.Context) (result []*Spredicate, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedPredicates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.PredicatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryPredicates().All(ctx)
	}
	return result, err
}

func (s *Statement) Subjects(ctx context.Context) (result []*Subject, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedSubjects(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.SubjectsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QuerySubjects().All(ctx)
	}
	return result, err
}

func (s *Subject) Statement(ctx context.Context) (result []*Statement, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedStatement(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.StatementOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryStatement().All(ctx)
	}
	return result, err
}
