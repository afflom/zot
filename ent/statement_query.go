// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"zotregistry.io/zot/ent/object"
	"zotregistry.io/zot/ent/predicate"
	"zotregistry.io/zot/ent/spredicate"
	"zotregistry.io/zot/ent/statement"
	"zotregistry.io/zot/ent/subject"
)

// StatementQuery is the builder for querying Statement entities.
type StatementQuery struct {
	config
	ctx                 *QueryContext
	order               []statement.OrderOption
	inters              []Interceptor
	predicates          []predicate.Statement
	withObjects         *ObjectQuery
	withPredicates      *SpredicateQuery
	withSubjects        *SubjectQuery
	modifiers           []func(*sql.Selector)
	loadTotal           []func(context.Context, []*Statement) error
	withNamedObjects    map[string]*ObjectQuery
	withNamedPredicates map[string]*SpredicateQuery
	withNamedSubjects   map[string]*SubjectQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StatementQuery builder.
func (sq *StatementQuery) Where(ps ...predicate.Statement) *StatementQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *StatementQuery) Limit(limit int) *StatementQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *StatementQuery) Offset(offset int) *StatementQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *StatementQuery) Unique(unique bool) *StatementQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *StatementQuery) Order(o ...statement.OrderOption) *StatementQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryObjects chains the current query on the "objects" edge.
func (sq *StatementQuery) QueryObjects() *ObjectQuery {
	query := (&ObjectClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statement.Table, statement.FieldID, selector),
			sqlgraph.To(object.Table, object.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, statement.ObjectsTable, statement.ObjectsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPredicates chains the current query on the "predicates" edge.
func (sq *StatementQuery) QueryPredicates() *SpredicateQuery {
	query := (&SpredicateClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statement.Table, statement.FieldID, selector),
			sqlgraph.To(spredicate.Table, spredicate.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, statement.PredicatesTable, statement.PredicatesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubjects chains the current query on the "subjects" edge.
func (sq *StatementQuery) QuerySubjects() *SubjectQuery {
	query := (&SubjectClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statement.Table, statement.FieldID, selector),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, statement.SubjectsTable, statement.SubjectsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Statement entity from the query.
// Returns a *NotFoundError when no Statement was found.
func (sq *StatementQuery) First(ctx context.Context) (*Statement, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{statement.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *StatementQuery) FirstX(ctx context.Context) *Statement {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Statement ID from the query.
// Returns a *NotFoundError when no Statement ID was found.
func (sq *StatementQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{statement.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *StatementQuery) FirstIDX(ctx context.Context) int {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Statement entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Statement entity is found.
// Returns a *NotFoundError when no Statement entities are found.
func (sq *StatementQuery) Only(ctx context.Context) (*Statement, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{statement.Label}
	default:
		return nil, &NotSingularError{statement.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *StatementQuery) OnlyX(ctx context.Context) *Statement {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Statement ID in the query.
// Returns a *NotSingularError when more than one Statement ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *StatementQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{statement.Label}
	default:
		err = &NotSingularError{statement.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *StatementQuery) OnlyIDX(ctx context.Context) int {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Statements.
func (sq *StatementQuery) All(ctx context.Context) ([]*Statement, error) {
	ctx = setContextOp(ctx, sq.ctx, "All")
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Statement, *StatementQuery]()
	return withInterceptors[[]*Statement](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *StatementQuery) AllX(ctx context.Context) []*Statement {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Statement IDs.
func (sq *StatementQuery) IDs(ctx context.Context) (ids []int, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, "IDs")
	if err = sq.Select(statement.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *StatementQuery) IDsX(ctx context.Context) []int {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *StatementQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, "Count")
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*StatementQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *StatementQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *StatementQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, "Exist")
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *StatementQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StatementQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *StatementQuery) Clone() *StatementQuery {
	if sq == nil {
		return nil
	}
	return &StatementQuery{
		config:         sq.config,
		ctx:            sq.ctx.Clone(),
		order:          append([]statement.OrderOption{}, sq.order...),
		inters:         append([]Interceptor{}, sq.inters...),
		predicates:     append([]predicate.Statement{}, sq.predicates...),
		withObjects:    sq.withObjects.Clone(),
		withPredicates: sq.withPredicates.Clone(),
		withSubjects:   sq.withSubjects.Clone(),
		// clone intermediate query.
		sql:  sq.sql.Clone(),
		path: sq.path,
	}
}

// WithObjects tells the query-builder to eager-load the nodes that are connected to
// the "objects" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StatementQuery) WithObjects(opts ...func(*ObjectQuery)) *StatementQuery {
	query := (&ObjectClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withObjects = query
	return sq
}

// WithPredicates tells the query-builder to eager-load the nodes that are connected to
// the "predicates" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StatementQuery) WithPredicates(opts ...func(*SpredicateQuery)) *StatementQuery {
	query := (&SpredicateClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withPredicates = query
	return sq
}

// WithSubjects tells the query-builder to eager-load the nodes that are connected to
// the "subjects" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StatementQuery) WithSubjects(opts ...func(*SubjectQuery)) *StatementQuery {
	query := (&SubjectClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withSubjects = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Statement.Query().
//		GroupBy(statement.FieldNamespace).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sq *StatementQuery) GroupBy(field string, fields ...string) *StatementGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &StatementGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = statement.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.Statement.Query().
//		Select(statement.FieldNamespace).
//		Scan(ctx, &v)
func (sq *StatementQuery) Select(fields ...string) *StatementSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &StatementSelect{StatementQuery: sq}
	sbuild.label = statement.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a StatementSelect configured with the given aggregations.
func (sq *StatementQuery) Aggregate(fns ...AggregateFunc) *StatementSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *StatementQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.ctx.Fields {
		if !statement.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *StatementQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Statement, error) {
	var (
		nodes       = []*Statement{}
		_spec       = sq.querySpec()
		loadedTypes = [3]bool{
			sq.withObjects != nil,
			sq.withPredicates != nil,
			sq.withSubjects != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Statement).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Statement{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withObjects; query != nil {
		if err := sq.loadObjects(ctx, query, nodes,
			func(n *Statement) { n.Edges.Objects = []*Object{} },
			func(n *Statement, e *Object) { n.Edges.Objects = append(n.Edges.Objects, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withPredicates; query != nil {
		if err := sq.loadPredicates(ctx, query, nodes,
			func(n *Statement) { n.Edges.Predicates = []*Spredicate{} },
			func(n *Statement, e *Spredicate) { n.Edges.Predicates = append(n.Edges.Predicates, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withSubjects; query != nil {
		if err := sq.loadSubjects(ctx, query, nodes,
			func(n *Statement) { n.Edges.Subjects = []*Subject{} },
			func(n *Statement, e *Subject) { n.Edges.Subjects = append(n.Edges.Subjects, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedObjects {
		if err := sq.loadObjects(ctx, query, nodes,
			func(n *Statement) { n.appendNamedObjects(name) },
			func(n *Statement, e *Object) { n.appendNamedObjects(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedPredicates {
		if err := sq.loadPredicates(ctx, query, nodes,
			func(n *Statement) { n.appendNamedPredicates(name) },
			func(n *Statement, e *Spredicate) { n.appendNamedPredicates(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedSubjects {
		if err := sq.loadSubjects(ctx, query, nodes,
			func(n *Statement) { n.appendNamedSubjects(name) },
			func(n *Statement, e *Subject) { n.appendNamedSubjects(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range sq.loadTotal {
		if err := sq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *StatementQuery) loadObjects(ctx context.Context, query *ObjectQuery, nodes []*Statement, init func(*Statement), assign func(*Statement, *Object)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Statement)
	nids := make(map[int]map[*Statement]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(statement.ObjectsTable)
		s.Join(joinT).On(s.C(object.FieldID), joinT.C(statement.ObjectsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(statement.ObjectsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(statement.ObjectsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Statement]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Object](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "objects" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *StatementQuery) loadPredicates(ctx context.Context, query *SpredicateQuery, nodes []*Statement, init func(*Statement), assign func(*Statement, *Spredicate)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Statement)
	nids := make(map[int]map[*Statement]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(statement.PredicatesTable)
		s.Join(joinT).On(s.C(spredicate.FieldID), joinT.C(statement.PredicatesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(statement.PredicatesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(statement.PredicatesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Statement]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Spredicate](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "predicates" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *StatementQuery) loadSubjects(ctx context.Context, query *SubjectQuery, nodes []*Statement, init func(*Statement), assign func(*Statement, *Subject)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Statement)
	nids := make(map[int]map[*Statement]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(statement.SubjectsTable)
		s.Join(joinT).On(s.C(subject.FieldID), joinT.C(statement.SubjectsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(statement.SubjectsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(statement.SubjectsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Statement]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Subject](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subjects" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (sq *StatementQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	_spec.Node.Columns = sq.ctx.Fields
	if len(sq.ctx.Fields) > 0 {
		_spec.Unique = sq.ctx.Unique != nil && *sq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *StatementQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(statement.Table, statement.Columns, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt))
	_spec.From = sq.sql
	if unique := sq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sq.path != nil {
		_spec.Unique = true
	}
	if fields := sq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statement.FieldID)
		for i := range fields {
			if fields[i] != statement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *StatementQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(statement.Table)
	columns := sq.ctx.Fields
	if len(columns) == 0 {
		columns = statement.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.ctx.Unique != nil && *sq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedObjects tells the query-builder to eager-load the nodes that are connected to the "objects"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *StatementQuery) WithNamedObjects(name string, opts ...func(*ObjectQuery)) *StatementQuery {
	query := (&ObjectClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedObjects == nil {
		sq.withNamedObjects = make(map[string]*ObjectQuery)
	}
	sq.withNamedObjects[name] = query
	return sq
}

// WithNamedPredicates tells the query-builder to eager-load the nodes that are connected to the "predicates"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *StatementQuery) WithNamedPredicates(name string, opts ...func(*SpredicateQuery)) *StatementQuery {
	query := (&SpredicateClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedPredicates == nil {
		sq.withNamedPredicates = make(map[string]*SpredicateQuery)
	}
	sq.withNamedPredicates[name] = query
	return sq
}

// WithNamedSubjects tells the query-builder to eager-load the nodes that are connected to the "subjects"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *StatementQuery) WithNamedSubjects(name string, opts ...func(*SubjectQuery)) *StatementQuery {
	query := (&SubjectClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedSubjects == nil {
		sq.withNamedSubjects = make(map[string]*SubjectQuery)
	}
	sq.withNamedSubjects[name] = query
	return sq
}

// StatementGroupBy is the group-by builder for Statement entities.
type StatementGroupBy struct {
	selector
	build *StatementQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *StatementGroupBy) Aggregate(fns ...AggregateFunc) *StatementGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *StatementGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, "GroupBy")
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StatementQuery, *StatementGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *StatementGroupBy) sqlScan(ctx context.Context, root *StatementQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// StatementSelect is the builder for selecting fields of Statement entities.
type StatementSelect struct {
	*StatementQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *StatementSelect) Aggregate(fns ...AggregateFunc) *StatementSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *StatementSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, "Select")
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StatementQuery, *StatementSelect](ctx, ss.StatementQuery, ss, ss.inters, v)
}

func (ss *StatementSelect) sqlScan(ctx context.Context, root *StatementQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
