// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"zotregistry.io/zot/ent/resource"
)

// Resource is the model entity for the Resource schema.
type Resource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Message holds the value of the "message" field.
	Message *map[string]interface{} `json:"message,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceQuery when eager-loading is set.
	Edges             ResourceEdges `json:"edges"`
	element_resources *int
	element_locations *int
	selectValues      sql.SelectValues
}

// ResourceEdges holds the relations/edges for other nodes in the graph.
type ResourceEdges struct {
	// Elements holds the value of the elements edge.
	Elements []*Element `json:"elements,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedElements map[string][]*Element
}

// ElementsOrErr returns the Elements value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) ElementsOrErr() ([]*Element, error) {
	if e.loadedTypes[0] {
		return e.Elements, nil
	}
	return nil, &NotLoadedError{edge: "elements"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Resource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resource.FieldMessage:
			values[i] = new([]byte)
		case resource.FieldID:
			values[i] = new(sql.NullInt64)
		case resource.ForeignKeys[0]: // element_resources
			values[i] = new(sql.NullInt64)
		case resource.ForeignKeys[1]: // element_locations
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Resource fields.
func (r *Resource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case resource.FieldMessage:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Message); err != nil {
					return fmt.Errorf("unmarshal field message: %w", err)
				}
			}
		case resource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field element_resources", value)
			} else if value.Valid {
				r.element_resources = new(int)
				*r.element_resources = int(value.Int64)
			}
		case resource.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field element_locations", value)
			} else if value.Valid {
				r.element_locations = new(int)
				*r.element_locations = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Resource.
// This includes values selected through modifiers, order, etc.
func (r *Resource) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryElements queries the "elements" edge of the Resource entity.
func (r *Resource) QueryElements() *ElementQuery {
	return NewResourceClient(r.config).QueryElements(r)
}

// Update returns a builder for updating this Resource.
// Note that you need to call Resource.Unwrap() before calling this method if this Resource
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Resource) Update() *ResourceUpdateOne {
	return NewResourceClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Resource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Resource) Unwrap() *Resource {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Resource is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Resource) String() string {
	var builder strings.Builder
	builder.WriteString("Resource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("message=")
	builder.WriteString(fmt.Sprintf("%v", r.Message))
	builder.WriteByte(')')
	return builder.String()
}

// NamedElements returns the Elements named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Resource) NamedElements(name string) ([]*Element, error) {
	if r.Edges.namedElements == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedElements[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Resource) appendNamedElements(name string, edges ...*Element) {
	if r.Edges.namedElements == nil {
		r.Edges.namedElements = make(map[string][]*Element)
	}
	if len(edges) == 0 {
		r.Edges.namedElements[name] = []*Element{}
	} else {
		r.Edges.namedElements[name] = append(r.Edges.namedElements[name], edges...)
	}
}

// Resources is a parsable slice of Resource.
type Resources []*Resource
