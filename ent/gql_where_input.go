// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"

	"zotregistry.io/zot/ent/element"
	"zotregistry.io/zot/ent/predicate"
	"zotregistry.io/zot/ent/resource"
	"zotregistry.io/zot/ent/statement"
)

// ElementWhereInput represents a where input for filtering Element queries.
type ElementWhereInput struct {
	Predicates []predicate.Element  `json:"-"`
	Not        *ElementWhereInput   `json:"not,omitempty"`
	Or         []*ElementWhereInput `json:"or,omitempty"`
	And        []*ElementWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "resourceType" field predicates.
	ResourceType             *string  `json:"resourcetype,omitempty"`
	ResourceTypeNEQ          *string  `json:"resourcetypeNEQ,omitempty"`
	ResourceTypeIn           []string `json:"resourcetypeIn,omitempty"`
	ResourceTypeNotIn        []string `json:"resourcetypeNotIn,omitempty"`
	ResourceTypeGT           *string  `json:"resourcetypeGT,omitempty"`
	ResourceTypeGTE          *string  `json:"resourcetypeGTE,omitempty"`
	ResourceTypeLT           *string  `json:"resourcetypeLT,omitempty"`
	ResourceTypeLTE          *string  `json:"resourcetypeLTE,omitempty"`
	ResourceTypeContains     *string  `json:"resourcetypeContains,omitempty"`
	ResourceTypeHasPrefix    *string  `json:"resourcetypeHasPrefix,omitempty"`
	ResourceTypeHasSuffix    *string  `json:"resourcetypeHasSuffix,omitempty"`
	ResourceTypeEqualFold    *string  `json:"resourcetypeEqualFold,omitempty"`
	ResourceTypeContainsFold *string  `json:"resourcetypeContainsFold,omitempty"`

	// "locatorType" field predicates.
	LocatorType             *string  `json:"locatortype,omitempty"`
	LocatorTypeNEQ          *string  `json:"locatortypeNEQ,omitempty"`
	LocatorTypeIn           []string `json:"locatortypeIn,omitempty"`
	LocatorTypeNotIn        []string `json:"locatortypeNotIn,omitempty"`
	LocatorTypeGT           *string  `json:"locatortypeGT,omitempty"`
	LocatorTypeGTE          *string  `json:"locatortypeGTE,omitempty"`
	LocatorTypeLT           *string  `json:"locatortypeLT,omitempty"`
	LocatorTypeLTE          *string  `json:"locatortypeLTE,omitempty"`
	LocatorTypeContains     *string  `json:"locatortypeContains,omitempty"`
	LocatorTypeHasPrefix    *string  `json:"locatortypeHasPrefix,omitempty"`
	LocatorTypeHasSuffix    *string  `json:"locatortypeHasSuffix,omitempty"`
	LocatorTypeEqualFold    *string  `json:"locatortypeEqualFold,omitempty"`
	LocatorTypeContainsFold *string  `json:"locatortypeContainsFold,omitempty"`

	// "statements" edge predicates.
	HasStatements     *bool                  `json:"hasStatements,omitempty"`
	HasStatementsWith []*StatementWhereInput `json:"hasStatementsWith,omitempty"`

	// "resources" edge predicates.
	HasResources     *bool                 `json:"hasResources,omitempty"`
	HasResourcesWith []*ResourceWhereInput `json:"hasResourcesWith,omitempty"`

	// "locations" edge predicates.
	HasLocations     *bool                 `json:"hasLocations,omitempty"`
	HasLocationsWith []*ResourceWhereInput `json:"hasLocationsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ElementWhereInput) AddPredicates(predicates ...predicate.Element) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ElementWhereInput filter on the ElementQuery builder.
func (i *ElementWhereInput) Filter(q *ElementQuery) (*ElementQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyElementWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyElementWhereInput is returned in case the ElementWhereInput is empty.
var ErrEmptyElementWhereInput = errors.New("ent: empty predicate ElementWhereInput")

// P returns a predicate for filtering elements.
// An error is returned if the input is empty or invalid.
func (i *ElementWhereInput) P() (predicate.Element, error) {
	var predicates []predicate.Element
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, element.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Element, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, element.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Element, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, element.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, element.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, element.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, element.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, element.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, element.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, element.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, element.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, element.IDLTE(*i.IDLTE))
	}
	if i.ResourceType != nil {
		predicates = append(predicates, element.ResourceTypeEQ(*i.ResourceType))
	}
	if i.ResourceTypeNEQ != nil {
		predicates = append(predicates, element.ResourceTypeNEQ(*i.ResourceTypeNEQ))
	}
	if len(i.ResourceTypeIn) > 0 {
		predicates = append(predicates, element.ResourceTypeIn(i.ResourceTypeIn...))
	}
	if len(i.ResourceTypeNotIn) > 0 {
		predicates = append(predicates, element.ResourceTypeNotIn(i.ResourceTypeNotIn...))
	}
	if i.ResourceTypeGT != nil {
		predicates = append(predicates, element.ResourceTypeGT(*i.ResourceTypeGT))
	}
	if i.ResourceTypeGTE != nil {
		predicates = append(predicates, element.ResourceTypeGTE(*i.ResourceTypeGTE))
	}
	if i.ResourceTypeLT != nil {
		predicates = append(predicates, element.ResourceTypeLT(*i.ResourceTypeLT))
	}
	if i.ResourceTypeLTE != nil {
		predicates = append(predicates, element.ResourceTypeLTE(*i.ResourceTypeLTE))
	}
	if i.ResourceTypeContains != nil {
		predicates = append(predicates, element.ResourceTypeContains(*i.ResourceTypeContains))
	}
	if i.ResourceTypeHasPrefix != nil {
		predicates = append(predicates, element.ResourceTypeHasPrefix(*i.ResourceTypeHasPrefix))
	}
	if i.ResourceTypeHasSuffix != nil {
		predicates = append(predicates, element.ResourceTypeHasSuffix(*i.ResourceTypeHasSuffix))
	}
	if i.ResourceTypeEqualFold != nil {
		predicates = append(predicates, element.ResourceTypeEqualFold(*i.ResourceTypeEqualFold))
	}
	if i.ResourceTypeContainsFold != nil {
		predicates = append(predicates, element.ResourceTypeContainsFold(*i.ResourceTypeContainsFold))
	}
	if i.LocatorType != nil {
		predicates = append(predicates, element.LocatorTypeEQ(*i.LocatorType))
	}
	if i.LocatorTypeNEQ != nil {
		predicates = append(predicates, element.LocatorTypeNEQ(*i.LocatorTypeNEQ))
	}
	if len(i.LocatorTypeIn) > 0 {
		predicates = append(predicates, element.LocatorTypeIn(i.LocatorTypeIn...))
	}
	if len(i.LocatorTypeNotIn) > 0 {
		predicates = append(predicates, element.LocatorTypeNotIn(i.LocatorTypeNotIn...))
	}
	if i.LocatorTypeGT != nil {
		predicates = append(predicates, element.LocatorTypeGT(*i.LocatorTypeGT))
	}
	if i.LocatorTypeGTE != nil {
		predicates = append(predicates, element.LocatorTypeGTE(*i.LocatorTypeGTE))
	}
	if i.LocatorTypeLT != nil {
		predicates = append(predicates, element.LocatorTypeLT(*i.LocatorTypeLT))
	}
	if i.LocatorTypeLTE != nil {
		predicates = append(predicates, element.LocatorTypeLTE(*i.LocatorTypeLTE))
	}
	if i.LocatorTypeContains != nil {
		predicates = append(predicates, element.LocatorTypeContains(*i.LocatorTypeContains))
	}
	if i.LocatorTypeHasPrefix != nil {
		predicates = append(predicates, element.LocatorTypeHasPrefix(*i.LocatorTypeHasPrefix))
	}
	if i.LocatorTypeHasSuffix != nil {
		predicates = append(predicates, element.LocatorTypeHasSuffix(*i.LocatorTypeHasSuffix))
	}
	if i.LocatorTypeEqualFold != nil {
		predicates = append(predicates, element.LocatorTypeEqualFold(*i.LocatorTypeEqualFold))
	}
	if i.LocatorTypeContainsFold != nil {
		predicates = append(predicates, element.LocatorTypeContainsFold(*i.LocatorTypeContainsFold))
	}

	if i.HasStatements != nil {
		p := element.HasStatements()
		if !*i.HasStatements {
			p = element.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasStatementsWith) > 0 {
		with := make([]predicate.Statement, 0, len(i.HasStatementsWith))
		for _, w := range i.HasStatementsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasStatementsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, element.HasStatementsWith(with...))
	}
	if i.HasResources != nil {
		p := element.HasResources()
		if !*i.HasResources {
			p = element.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasResourcesWith) > 0 {
		with := make([]predicate.Resource, 0, len(i.HasResourcesWith))
		for _, w := range i.HasResourcesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasResourcesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, element.HasResourcesWith(with...))
	}
	if i.HasLocations != nil {
		p := element.HasLocations()
		if !*i.HasLocations {
			p = element.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLocationsWith) > 0 {
		with := make([]predicate.Resource, 0, len(i.HasLocationsWith))
		for _, w := range i.HasLocationsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLocationsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, element.HasLocationsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyElementWhereInput
	case 1:
		return predicates[0], nil
	default:
		return element.And(predicates...), nil
	}
}

// ResourceWhereInput represents a where input for filtering Resource queries.
type ResourceWhereInput struct {
	Predicates []predicate.Resource  `json:"-"`
	Not        *ResourceWhereInput   `json:"not,omitempty"`
	Or         []*ResourceWhereInput `json:"or,omitempty"`
	And        []*ResourceWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "elements" edge predicates.
	HasElements     *bool                `json:"hasElements,omitempty"`
	HasElementsWith []*ElementWhereInput `json:"hasElementsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ResourceWhereInput) AddPredicates(predicates ...predicate.Resource) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ResourceWhereInput filter on the ResourceQuery builder.
func (i *ResourceWhereInput) Filter(q *ResourceQuery) (*ResourceQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyResourceWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyResourceWhereInput is returned in case the ResourceWhereInput is empty.
var ErrEmptyResourceWhereInput = errors.New("ent: empty predicate ResourceWhereInput")

// P returns a predicate for filtering resources.
// An error is returned if the input is empty or invalid.
func (i *ResourceWhereInput) P() (predicate.Resource, error) {
	var predicates []predicate.Resource
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, resource.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Resource, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, resource.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Resource, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, resource.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, resource.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, resource.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, resource.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, resource.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, resource.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, resource.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, resource.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, resource.IDLTE(*i.IDLTE))
	}

	if i.HasElements != nil {
		p := resource.HasElements()
		if !*i.HasElements {
			p = resource.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasElementsWith) > 0 {
		with := make([]predicate.Element, 0, len(i.HasElementsWith))
		for _, w := range i.HasElementsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasElementsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, resource.HasElementsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyResourceWhereInput
	case 1:
		return predicates[0], nil
	default:
		return resource.And(predicates...), nil
	}
}

// StatementWhereInput represents a where input for filtering Statement queries.
type StatementWhereInput struct {
	Predicates []predicate.Statement  `json:"-"`
	Not        *StatementWhereInput   `json:"not,omitempty"`
	Or         []*StatementWhereInput `json:"or,omitempty"`
	And        []*StatementWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "mediaType" field predicates.
	MediaType             *string  `json:"mediatype,omitempty"`
	MediaTypeNEQ          *string  `json:"mediatypeNEQ,omitempty"`
	MediaTypeIn           []string `json:"mediatypeIn,omitempty"`
	MediaTypeNotIn        []string `json:"mediatypeNotIn,omitempty"`
	MediaTypeGT           *string  `json:"mediatypeGT,omitempty"`
	MediaTypeGTE          *string  `json:"mediatypeGTE,omitempty"`
	MediaTypeLT           *string  `json:"mediatypeLT,omitempty"`
	MediaTypeLTE          *string  `json:"mediatypeLTE,omitempty"`
	MediaTypeContains     *string  `json:"mediatypeContains,omitempty"`
	MediaTypeHasPrefix    *string  `json:"mediatypeHasPrefix,omitempty"`
	MediaTypeHasSuffix    *string  `json:"mediatypeHasSuffix,omitempty"`
	MediaTypeEqualFold    *string  `json:"mediatypeEqualFold,omitempty"`
	MediaTypeContainsFold *string  `json:"mediatypeContainsFold,omitempty"`

	// "objects" edge predicates.
	HasObjects     *bool                `json:"hasObjects,omitempty"`
	HasObjectsWith []*ElementWhereInput `json:"hasObjectsWith,omitempty"`

	// "predicates" edge predicates.
	HasPredicates     *bool                `json:"hasPredicates,omitempty"`
	HasPredicatesWith []*ElementWhereInput `json:"hasPredicatesWith,omitempty"`

	// "subjects" edge predicates.
	HasSubjects     *bool                `json:"hasSubjects,omitempty"`
	HasSubjectsWith []*ElementWhereInput `json:"hasSubjectsWith,omitempty"`

	// "statements" edge predicates.
	HasStatements     *bool                `json:"hasStatements,omitempty"`
	HasStatementsWith []*ElementWhereInput `json:"hasStatementsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *StatementWhereInput) AddPredicates(predicates ...predicate.Statement) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the StatementWhereInput filter on the StatementQuery builder.
func (i *StatementWhereInput) Filter(q *StatementQuery) (*StatementQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyStatementWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyStatementWhereInput is returned in case the StatementWhereInput is empty.
var ErrEmptyStatementWhereInput = errors.New("ent: empty predicate StatementWhereInput")

// P returns a predicate for filtering statements.
// An error is returned if the input is empty or invalid.
func (i *StatementWhereInput) P() (predicate.Statement, error) {
	var predicates []predicate.Statement
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, statement.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Statement, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, statement.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Statement, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, statement.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, statement.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, statement.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, statement.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, statement.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, statement.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, statement.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, statement.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, statement.IDLTE(*i.IDLTE))
	}
	if i.MediaType != nil {
		predicates = append(predicates, statement.MediaTypeEQ(*i.MediaType))
	}
	if i.MediaTypeNEQ != nil {
		predicates = append(predicates, statement.MediaTypeNEQ(*i.MediaTypeNEQ))
	}
	if len(i.MediaTypeIn) > 0 {
		predicates = append(predicates, statement.MediaTypeIn(i.MediaTypeIn...))
	}
	if len(i.MediaTypeNotIn) > 0 {
		predicates = append(predicates, statement.MediaTypeNotIn(i.MediaTypeNotIn...))
	}
	if i.MediaTypeGT != nil {
		predicates = append(predicates, statement.MediaTypeGT(*i.MediaTypeGT))
	}
	if i.MediaTypeGTE != nil {
		predicates = append(predicates, statement.MediaTypeGTE(*i.MediaTypeGTE))
	}
	if i.MediaTypeLT != nil {
		predicates = append(predicates, statement.MediaTypeLT(*i.MediaTypeLT))
	}
	if i.MediaTypeLTE != nil {
		predicates = append(predicates, statement.MediaTypeLTE(*i.MediaTypeLTE))
	}
	if i.MediaTypeContains != nil {
		predicates = append(predicates, statement.MediaTypeContains(*i.MediaTypeContains))
	}
	if i.MediaTypeHasPrefix != nil {
		predicates = append(predicates, statement.MediaTypeHasPrefix(*i.MediaTypeHasPrefix))
	}
	if i.MediaTypeHasSuffix != nil {
		predicates = append(predicates, statement.MediaTypeHasSuffix(*i.MediaTypeHasSuffix))
	}
	if i.MediaTypeEqualFold != nil {
		predicates = append(predicates, statement.MediaTypeEqualFold(*i.MediaTypeEqualFold))
	}
	if i.MediaTypeContainsFold != nil {
		predicates = append(predicates, statement.MediaTypeContainsFold(*i.MediaTypeContainsFold))
	}

	if i.HasObjects != nil {
		p := statement.HasObjects()
		if !*i.HasObjects {
			p = statement.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasObjectsWith) > 0 {
		with := make([]predicate.Element, 0, len(i.HasObjectsWith))
		for _, w := range i.HasObjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasObjectsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, statement.HasObjectsWith(with...))
	}
	if i.HasPredicates != nil {
		p := statement.HasPredicates()
		if !*i.HasPredicates {
			p = statement.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPredicatesWith) > 0 {
		with := make([]predicate.Element, 0, len(i.HasPredicatesWith))
		for _, w := range i.HasPredicatesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPredicatesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, statement.HasPredicatesWith(with...))
	}
	if i.HasSubjects != nil {
		p := statement.HasSubjects()
		if !*i.HasSubjects {
			p = statement.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSubjectsWith) > 0 {
		with := make([]predicate.Element, 0, len(i.HasSubjectsWith))
		for _, w := range i.HasSubjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSubjectsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, statement.HasSubjectsWith(with...))
	}
	if i.HasStatements != nil {
		p := statement.HasStatements()
		if !*i.HasStatements {
			p = statement.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasStatementsWith) > 0 {
		with := make([]predicate.Element, 0, len(i.HasStatementsWith))
		for _, w := range i.HasStatementsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasStatementsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, statement.HasStatementsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyStatementWhereInput
	case 1:
		return predicates[0], nil
	default:
		return statement.And(predicates...), nil
	}
}
