// Code generated by ent, DO NOT EDIT.

package element

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"zotregistry.io/zot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Element {
	return predicate.Element(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Element {
	return predicate.Element(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Element {
	return predicate.Element(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Element {
	return predicate.Element(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Element {
	return predicate.Element(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Element {
	return predicate.Element(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Element {
	return predicate.Element(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Element {
	return predicate.Element(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Element {
	return predicate.Element(sql.FieldLTE(FieldID, id))
}

// ResourceType applies equality check predicate on the "resourceType" field. It's identical to ResourceTypeEQ.
func ResourceType(v string) predicate.Element {
	return predicate.Element(sql.FieldEQ(FieldResourceType, v))
}

// LocatorType applies equality check predicate on the "locatorType" field. It's identical to LocatorTypeEQ.
func LocatorType(v string) predicate.Element {
	return predicate.Element(sql.FieldEQ(FieldLocatorType, v))
}

// ResourceTypeEQ applies the EQ predicate on the "resourceType" field.
func ResourceTypeEQ(v string) predicate.Element {
	return predicate.Element(sql.FieldEQ(FieldResourceType, v))
}

// ResourceTypeNEQ applies the NEQ predicate on the "resourceType" field.
func ResourceTypeNEQ(v string) predicate.Element {
	return predicate.Element(sql.FieldNEQ(FieldResourceType, v))
}

// ResourceTypeIn applies the In predicate on the "resourceType" field.
func ResourceTypeIn(vs ...string) predicate.Element {
	return predicate.Element(sql.FieldIn(FieldResourceType, vs...))
}

// ResourceTypeNotIn applies the NotIn predicate on the "resourceType" field.
func ResourceTypeNotIn(vs ...string) predicate.Element {
	return predicate.Element(sql.FieldNotIn(FieldResourceType, vs...))
}

// ResourceTypeGT applies the GT predicate on the "resourceType" field.
func ResourceTypeGT(v string) predicate.Element {
	return predicate.Element(sql.FieldGT(FieldResourceType, v))
}

// ResourceTypeGTE applies the GTE predicate on the "resourceType" field.
func ResourceTypeGTE(v string) predicate.Element {
	return predicate.Element(sql.FieldGTE(FieldResourceType, v))
}

// ResourceTypeLT applies the LT predicate on the "resourceType" field.
func ResourceTypeLT(v string) predicate.Element {
	return predicate.Element(sql.FieldLT(FieldResourceType, v))
}

// ResourceTypeLTE applies the LTE predicate on the "resourceType" field.
func ResourceTypeLTE(v string) predicate.Element {
	return predicate.Element(sql.FieldLTE(FieldResourceType, v))
}

// ResourceTypeContains applies the Contains predicate on the "resourceType" field.
func ResourceTypeContains(v string) predicate.Element {
	return predicate.Element(sql.FieldContains(FieldResourceType, v))
}

// ResourceTypeHasPrefix applies the HasPrefix predicate on the "resourceType" field.
func ResourceTypeHasPrefix(v string) predicate.Element {
	return predicate.Element(sql.FieldHasPrefix(FieldResourceType, v))
}

// ResourceTypeHasSuffix applies the HasSuffix predicate on the "resourceType" field.
func ResourceTypeHasSuffix(v string) predicate.Element {
	return predicate.Element(sql.FieldHasSuffix(FieldResourceType, v))
}

// ResourceTypeEqualFold applies the EqualFold predicate on the "resourceType" field.
func ResourceTypeEqualFold(v string) predicate.Element {
	return predicate.Element(sql.FieldEqualFold(FieldResourceType, v))
}

// ResourceTypeContainsFold applies the ContainsFold predicate on the "resourceType" field.
func ResourceTypeContainsFold(v string) predicate.Element {
	return predicate.Element(sql.FieldContainsFold(FieldResourceType, v))
}

// LocatorTypeEQ applies the EQ predicate on the "locatorType" field.
func LocatorTypeEQ(v string) predicate.Element {
	return predicate.Element(sql.FieldEQ(FieldLocatorType, v))
}

// LocatorTypeNEQ applies the NEQ predicate on the "locatorType" field.
func LocatorTypeNEQ(v string) predicate.Element {
	return predicate.Element(sql.FieldNEQ(FieldLocatorType, v))
}

// LocatorTypeIn applies the In predicate on the "locatorType" field.
func LocatorTypeIn(vs ...string) predicate.Element {
	return predicate.Element(sql.FieldIn(FieldLocatorType, vs...))
}

// LocatorTypeNotIn applies the NotIn predicate on the "locatorType" field.
func LocatorTypeNotIn(vs ...string) predicate.Element {
	return predicate.Element(sql.FieldNotIn(FieldLocatorType, vs...))
}

// LocatorTypeGT applies the GT predicate on the "locatorType" field.
func LocatorTypeGT(v string) predicate.Element {
	return predicate.Element(sql.FieldGT(FieldLocatorType, v))
}

// LocatorTypeGTE applies the GTE predicate on the "locatorType" field.
func LocatorTypeGTE(v string) predicate.Element {
	return predicate.Element(sql.FieldGTE(FieldLocatorType, v))
}

// LocatorTypeLT applies the LT predicate on the "locatorType" field.
func LocatorTypeLT(v string) predicate.Element {
	return predicate.Element(sql.FieldLT(FieldLocatorType, v))
}

// LocatorTypeLTE applies the LTE predicate on the "locatorType" field.
func LocatorTypeLTE(v string) predicate.Element {
	return predicate.Element(sql.FieldLTE(FieldLocatorType, v))
}

// LocatorTypeContains applies the Contains predicate on the "locatorType" field.
func LocatorTypeContains(v string) predicate.Element {
	return predicate.Element(sql.FieldContains(FieldLocatorType, v))
}

// LocatorTypeHasPrefix applies the HasPrefix predicate on the "locatorType" field.
func LocatorTypeHasPrefix(v string) predicate.Element {
	return predicate.Element(sql.FieldHasPrefix(FieldLocatorType, v))
}

// LocatorTypeHasSuffix applies the HasSuffix predicate on the "locatorType" field.
func LocatorTypeHasSuffix(v string) predicate.Element {
	return predicate.Element(sql.FieldHasSuffix(FieldLocatorType, v))
}

// LocatorTypeEqualFold applies the EqualFold predicate on the "locatorType" field.
func LocatorTypeEqualFold(v string) predicate.Element {
	return predicate.Element(sql.FieldEqualFold(FieldLocatorType, v))
}

// LocatorTypeContainsFold applies the ContainsFold predicate on the "locatorType" field.
func LocatorTypeContainsFold(v string) predicate.Element {
	return predicate.Element(sql.FieldContainsFold(FieldLocatorType, v))
}

// HasStatements applies the HasEdge predicate on the "statements" edge.
func HasStatements() predicate.Element {
	return predicate.Element(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatementsTable, StatementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatementsWith applies the HasEdge predicate on the "statements" edge with a given conditions (other predicates).
func HasStatementsWith(preds ...predicate.Statement) predicate.Element {
	return predicate.Element(func(s *sql.Selector) {
		step := newStatementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResources applies the HasEdge predicate on the "resources" edge.
func HasResources() predicate.Element {
	return predicate.Element(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ResourcesTable, ResourcesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResourcesWith applies the HasEdge predicate on the "resources" edge with a given conditions (other predicates).
func HasResourcesWith(preds ...predicate.Resource) predicate.Element {
	return predicate.Element(func(s *sql.Selector) {
		step := newResourcesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLocations applies the HasEdge predicate on the "locations" edge.
func HasLocations() predicate.Element {
	return predicate.Element(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LocationsTable, LocationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationsWith applies the HasEdge predicate on the "locations" edge with a given conditions (other predicates).
func HasLocationsWith(preds ...predicate.Resource) predicate.Element {
	return predicate.Element(func(s *sql.Selector) {
		step := newLocationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Element) predicate.Element {
	return predicate.Element(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Element) predicate.Element {
	return predicate.Element(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Element) predicate.Element {
	return predicate.Element(func(s *sql.Selector) {
		p(s.Not())
	})
}
