// Code generated by ent, DO NOT EDIT.

package element

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the element type in the database.
	Label = "element"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceType holds the string denoting the resourcetype field in the database.
	FieldResourceType = "resource_type"
	// FieldLocatorType holds the string denoting the locatortype field in the database.
	FieldLocatorType = "locator_type"
	// EdgeStatements holds the string denoting the statements edge name in mutations.
	EdgeStatements = "statements"
	// EdgeResources holds the string denoting the resources edge name in mutations.
	EdgeResources = "resources"
	// EdgeLocations holds the string denoting the locations edge name in mutations.
	EdgeLocations = "locations"
	// Table holds the table name of the element in the database.
	Table = "elements"
	// StatementsTable is the table that holds the statements relation/edge.
	StatementsTable = "statements"
	// StatementsInverseTable is the table name for the Statement entity.
	// It exists in this package in order to avoid circular dependency with the "statement" package.
	StatementsInverseTable = "statements"
	// StatementsColumn is the table column denoting the statements relation/edge.
	StatementsColumn = "element_statements"
	// ResourcesTable is the table that holds the resources relation/edge.
	ResourcesTable = "resources"
	// ResourcesInverseTable is the table name for the Resource entity.
	// It exists in this package in order to avoid circular dependency with the "resource" package.
	ResourcesInverseTable = "resources"
	// ResourcesColumn is the table column denoting the resources relation/edge.
	ResourcesColumn = "element_resources"
	// LocationsTable is the table that holds the locations relation/edge.
	LocationsTable = "resources"
	// LocationsInverseTable is the table name for the Resource entity.
	// It exists in this package in order to avoid circular dependency with the "resource" package.
	LocationsInverseTable = "resources"
	// LocationsColumn is the table column denoting the locations relation/edge.
	LocationsColumn = "element_locations"
)

// Columns holds all SQL columns for element fields.
var Columns = []string{
	FieldID,
	FieldResourceType,
	FieldLocatorType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "elements"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"resource_elements",
	"statement_objects",
	"statement_predicates",
	"statement_subjects",
	"statement_statements",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Element queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceType orders the results by the resourceType field.
func ByResourceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceType, opts...).ToFunc()
}

// ByLocatorType orders the results by the locatorType field.
func ByLocatorType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocatorType, opts...).ToFunc()
}

// ByStatementsCount orders the results by statements count.
func ByStatementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStatementsStep(), opts...)
	}
}

// ByStatements orders the results by statements terms.
func ByStatements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByResourcesCount orders the results by resources count.
func ByResourcesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResourcesStep(), opts...)
	}
}

// ByResources orders the results by resources terms.
func ByResources(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResourcesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLocationsCount orders the results by locations count.
func ByLocationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLocationsStep(), opts...)
	}
}

// ByLocations orders the results by locations terms.
func ByLocations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStatementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StatementsTable, StatementsColumn),
	)
}
func newResourcesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResourcesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ResourcesTable, ResourcesColumn),
	)
}
func newLocationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LocationsTable, LocationsColumn),
	)
}
