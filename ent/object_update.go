// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"zotregistry.io/zot/ent/object"
	"zotregistry.io/zot/ent/predicate"
	"zotregistry.io/zot/ent/statement"
)

// ObjectUpdate is the builder for updating Object entities.
type ObjectUpdate struct {
	config
	hooks    []Hook
	mutation *ObjectMutation
}

// Where appends a list predicates to the ObjectUpdate builder.
func (ou *ObjectUpdate) Where(ps ...predicate.Object) *ObjectUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetObjectType sets the "objectType" field.
func (ou *ObjectUpdate) SetObjectType(s string) *ObjectUpdate {
	ou.mutation.SetObjectType(s)
	return ou
}

// SetObject sets the "object" field.
func (ou *ObjectUpdate) SetObject(m map[string]interface{}) *ObjectUpdate {
	ou.mutation.SetObject(m)
	return ou
}

// AddStatementIDs adds the "statement" edge to the Statement entity by IDs.
func (ou *ObjectUpdate) AddStatementIDs(ids ...int) *ObjectUpdate {
	ou.mutation.AddStatementIDs(ids...)
	return ou
}

// AddStatement adds the "statement" edges to the Statement entity.
func (ou *ObjectUpdate) AddStatement(s ...*Statement) *ObjectUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.AddStatementIDs(ids...)
}

// Mutation returns the ObjectMutation object of the builder.
func (ou *ObjectUpdate) Mutation() *ObjectMutation {
	return ou.mutation
}

// ClearStatement clears all "statement" edges to the Statement entity.
func (ou *ObjectUpdate) ClearStatement() *ObjectUpdate {
	ou.mutation.ClearStatement()
	return ou
}

// RemoveStatementIDs removes the "statement" edge to Statement entities by IDs.
func (ou *ObjectUpdate) RemoveStatementIDs(ids ...int) *ObjectUpdate {
	ou.mutation.RemoveStatementIDs(ids...)
	return ou
}

// RemoveStatement removes "statement" edges to Statement entities.
func (ou *ObjectUpdate) RemoveStatement(s ...*Statement) *ObjectUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.RemoveStatementIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *ObjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *ObjectUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *ObjectUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *ObjectUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *ObjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(object.Table, object.Columns, sqlgraph.NewFieldSpec(object.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.ObjectType(); ok {
		_spec.SetField(object.FieldObjectType, field.TypeString, value)
	}
	if value, ok := ou.mutation.Object(); ok {
		_spec.SetField(object.FieldObject, field.TypeJSON, value)
	}
	if ou.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.StatementTable,
			Columns: object.StatementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedStatementIDs(); len(nodes) > 0 && !ou.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.StatementTable,
			Columns: object.StatementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.StatementTable,
			Columns: object.StatementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{object.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// ObjectUpdateOne is the builder for updating a single Object entity.
type ObjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ObjectMutation
}

// SetObjectType sets the "objectType" field.
func (ouo *ObjectUpdateOne) SetObjectType(s string) *ObjectUpdateOne {
	ouo.mutation.SetObjectType(s)
	return ouo
}

// SetObject sets the "object" field.
func (ouo *ObjectUpdateOne) SetObject(m map[string]interface{}) *ObjectUpdateOne {
	ouo.mutation.SetObject(m)
	return ouo
}

// AddStatementIDs adds the "statement" edge to the Statement entity by IDs.
func (ouo *ObjectUpdateOne) AddStatementIDs(ids ...int) *ObjectUpdateOne {
	ouo.mutation.AddStatementIDs(ids...)
	return ouo
}

// AddStatement adds the "statement" edges to the Statement entity.
func (ouo *ObjectUpdateOne) AddStatement(s ...*Statement) *ObjectUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.AddStatementIDs(ids...)
}

// Mutation returns the ObjectMutation object of the builder.
func (ouo *ObjectUpdateOne) Mutation() *ObjectMutation {
	return ouo.mutation
}

// ClearStatement clears all "statement" edges to the Statement entity.
func (ouo *ObjectUpdateOne) ClearStatement() *ObjectUpdateOne {
	ouo.mutation.ClearStatement()
	return ouo
}

// RemoveStatementIDs removes the "statement" edge to Statement entities by IDs.
func (ouo *ObjectUpdateOne) RemoveStatementIDs(ids ...int) *ObjectUpdateOne {
	ouo.mutation.RemoveStatementIDs(ids...)
	return ouo
}

// RemoveStatement removes "statement" edges to Statement entities.
func (ouo *ObjectUpdateOne) RemoveStatement(s ...*Statement) *ObjectUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.RemoveStatementIDs(ids...)
}

// Where appends a list predicates to the ObjectUpdate builder.
func (ouo *ObjectUpdateOne) Where(ps ...predicate.Object) *ObjectUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *ObjectUpdateOne) Select(field string, fields ...string) *ObjectUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Object entity.
func (ouo *ObjectUpdateOne) Save(ctx context.Context) (*Object, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *ObjectUpdateOne) SaveX(ctx context.Context) *Object {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *ObjectUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *ObjectUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *ObjectUpdateOne) sqlSave(ctx context.Context) (_node *Object, err error) {
	_spec := sqlgraph.NewUpdateSpec(object.Table, object.Columns, sqlgraph.NewFieldSpec(object.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Object.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, object.FieldID)
		for _, f := range fields {
			if !object.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != object.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.ObjectType(); ok {
		_spec.SetField(object.FieldObjectType, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Object(); ok {
		_spec.SetField(object.FieldObject, field.TypeJSON, value)
	}
	if ouo.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.StatementTable,
			Columns: object.StatementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedStatementIDs(); len(nodes) > 0 && !ouo.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.StatementTable,
			Columns: object.StatementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   object.StatementTable,
			Columns: object.StatementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Object{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{object.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
