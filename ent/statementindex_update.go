// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"zotregistry.io/zot/ent/predicate"
	"zotregistry.io/zot/ent/statementindex"
	"zotregistry.io/zot/pkg/search/schema"
)

// StatementIndexUpdate is the builder for updating StatementIndex entities.
type StatementIndexUpdate struct {
	config
	hooks    []Hook
	mutation *StatementIndexMutation
}

// Where appends a list predicates to the StatementIndexUpdate builder.
func (siu *StatementIndexUpdate) Where(ps ...predicate.StatementIndex) *StatementIndexUpdate {
	siu.mutation.Where(ps...)
	return siu
}

// SetObject sets the "object" field.
func (siu *StatementIndexUpdate) SetObject(s schema.Object) *StatementIndexUpdate {
	siu.mutation.SetObject(s)
	return siu
}

// SetPredicate sets the "predicate" field.
func (siu *StatementIndexUpdate) SetPredicate(s schema.Predicate) *StatementIndexUpdate {
	siu.mutation.SetPredicate(s)
	return siu
}

// SetSubject sets the "subject" field.
func (siu *StatementIndexUpdate) SetSubject(s schema.Subject) *StatementIndexUpdate {
	siu.mutation.SetSubject(s)
	return siu
}

// SetStatement sets the "statement" field.
func (siu *StatementIndexUpdate) SetStatement(s schema.Location) *StatementIndexUpdate {
	siu.mutation.SetStatement(s)
	return siu
}

// Mutation returns the StatementIndexMutation object of the builder.
func (siu *StatementIndexUpdate) Mutation() *StatementIndexMutation {
	return siu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *StatementIndexUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, siu.sqlSave, siu.mutation, siu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siu *StatementIndexUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *StatementIndexUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *StatementIndexUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (siu *StatementIndexUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(statementindex.Table, statementindex.Columns, sqlgraph.NewFieldSpec(statementindex.FieldID, field.TypeInt))
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.Object(); ok {
		_spec.SetField(statementindex.FieldObject, field.TypeJSON, value)
	}
	if value, ok := siu.mutation.Predicate(); ok {
		_spec.SetField(statementindex.FieldPredicate, field.TypeJSON, value)
	}
	if value, ok := siu.mutation.Subject(); ok {
		_spec.SetField(statementindex.FieldSubject, field.TypeJSON, value)
	}
	if value, ok := siu.mutation.Statement(); ok {
		_spec.SetField(statementindex.FieldStatement, field.TypeJSON, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statementindex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	siu.mutation.done = true
	return n, nil
}

// StatementIndexUpdateOne is the builder for updating a single StatementIndex entity.
type StatementIndexUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatementIndexMutation
}

// SetObject sets the "object" field.
func (siuo *StatementIndexUpdateOne) SetObject(s schema.Object) *StatementIndexUpdateOne {
	siuo.mutation.SetObject(s)
	return siuo
}

// SetPredicate sets the "predicate" field.
func (siuo *StatementIndexUpdateOne) SetPredicate(s schema.Predicate) *StatementIndexUpdateOne {
	siuo.mutation.SetPredicate(s)
	return siuo
}

// SetSubject sets the "subject" field.
func (siuo *StatementIndexUpdateOne) SetSubject(s schema.Subject) *StatementIndexUpdateOne {
	siuo.mutation.SetSubject(s)
	return siuo
}

// SetStatement sets the "statement" field.
func (siuo *StatementIndexUpdateOne) SetStatement(s schema.Location) *StatementIndexUpdateOne {
	siuo.mutation.SetStatement(s)
	return siuo
}

// Mutation returns the StatementIndexMutation object of the builder.
func (siuo *StatementIndexUpdateOne) Mutation() *StatementIndexMutation {
	return siuo.mutation
}

// Where appends a list predicates to the StatementIndexUpdate builder.
func (siuo *StatementIndexUpdateOne) Where(ps ...predicate.StatementIndex) *StatementIndexUpdateOne {
	siuo.mutation.Where(ps...)
	return siuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siuo *StatementIndexUpdateOne) Select(field string, fields ...string) *StatementIndexUpdateOne {
	siuo.fields = append([]string{field}, fields...)
	return siuo
}

// Save executes the query and returns the updated StatementIndex entity.
func (siuo *StatementIndexUpdateOne) Save(ctx context.Context) (*StatementIndex, error) {
	return withHooks(ctx, siuo.sqlSave, siuo.mutation, siuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *StatementIndexUpdateOne) SaveX(ctx context.Context) *StatementIndex {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *StatementIndexUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *StatementIndexUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (siuo *StatementIndexUpdateOne) sqlSave(ctx context.Context) (_node *StatementIndex, err error) {
	_spec := sqlgraph.NewUpdateSpec(statementindex.Table, statementindex.Columns, sqlgraph.NewFieldSpec(statementindex.FieldID, field.TypeInt))
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StatementIndex.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := siuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statementindex.FieldID)
		for _, f := range fields {
			if !statementindex.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statementindex.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.Object(); ok {
		_spec.SetField(statementindex.FieldObject, field.TypeJSON, value)
	}
	if value, ok := siuo.mutation.Predicate(); ok {
		_spec.SetField(statementindex.FieldPredicate, field.TypeJSON, value)
	}
	if value, ok := siuo.mutation.Subject(); ok {
		_spec.SetField(statementindex.FieldSubject, field.TypeJSON, value)
	}
	if value, ok := siuo.mutation.Statement(); ok {
		_spec.SetField(statementindex.FieldStatement, field.TypeJSON, value)
	}
	_node = &StatementIndex{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statementindex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	siuo.mutation.done = true
	return _node, nil
}
