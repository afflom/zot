// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"zotregistry.io/zot/ent/element"
	"zotregistry.io/zot/ent/predicate"
	"zotregistry.io/zot/ent/resource"
	"zotregistry.io/zot/ent/statement"
)

// ElementUpdate is the builder for updating Element entities.
type ElementUpdate struct {
	config
	hooks    []Hook
	mutation *ElementMutation
}

// Where appends a list predicates to the ElementUpdate builder.
func (eu *ElementUpdate) Where(ps ...predicate.Element) *ElementUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetResourceType sets the "resourceType" field.
func (eu *ElementUpdate) SetResourceType(s string) *ElementUpdate {
	eu.mutation.SetResourceType(s)
	return eu
}

// SetLocatorType sets the "locatorType" field.
func (eu *ElementUpdate) SetLocatorType(s string) *ElementUpdate {
	eu.mutation.SetLocatorType(s)
	return eu
}

// AddStatementIDs adds the "statements" edge to the Statement entity by IDs.
func (eu *ElementUpdate) AddStatementIDs(ids ...int) *ElementUpdate {
	eu.mutation.AddStatementIDs(ids...)
	return eu
}

// AddStatements adds the "statements" edges to the Statement entity.
func (eu *ElementUpdate) AddStatements(s ...*Statement) *ElementUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddStatementIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (eu *ElementUpdate) AddResourceIDs(ids ...int) *ElementUpdate {
	eu.mutation.AddResourceIDs(ids...)
	return eu
}

// AddResources adds the "resources" edges to the Resource entity.
func (eu *ElementUpdate) AddResources(r ...*Resource) *ElementUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddResourceIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Resource entity by IDs.
func (eu *ElementUpdate) AddLocationIDs(ids ...int) *ElementUpdate {
	eu.mutation.AddLocationIDs(ids...)
	return eu
}

// AddLocations adds the "locations" edges to the Resource entity.
func (eu *ElementUpdate) AddLocations(r ...*Resource) *ElementUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddLocationIDs(ids...)
}

// Mutation returns the ElementMutation object of the builder.
func (eu *ElementUpdate) Mutation() *ElementMutation {
	return eu.mutation
}

// ClearStatements clears all "statements" edges to the Statement entity.
func (eu *ElementUpdate) ClearStatements() *ElementUpdate {
	eu.mutation.ClearStatements()
	return eu
}

// RemoveStatementIDs removes the "statements" edge to Statement entities by IDs.
func (eu *ElementUpdate) RemoveStatementIDs(ids ...int) *ElementUpdate {
	eu.mutation.RemoveStatementIDs(ids...)
	return eu
}

// RemoveStatements removes "statements" edges to Statement entities.
func (eu *ElementUpdate) RemoveStatements(s ...*Statement) *ElementUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveStatementIDs(ids...)
}

// ClearResources clears all "resources" edges to the Resource entity.
func (eu *ElementUpdate) ClearResources() *ElementUpdate {
	eu.mutation.ClearResources()
	return eu
}

// RemoveResourceIDs removes the "resources" edge to Resource entities by IDs.
func (eu *ElementUpdate) RemoveResourceIDs(ids ...int) *ElementUpdate {
	eu.mutation.RemoveResourceIDs(ids...)
	return eu
}

// RemoveResources removes "resources" edges to Resource entities.
func (eu *ElementUpdate) RemoveResources(r ...*Resource) *ElementUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveResourceIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Resource entity.
func (eu *ElementUpdate) ClearLocations() *ElementUpdate {
	eu.mutation.ClearLocations()
	return eu
}

// RemoveLocationIDs removes the "locations" edge to Resource entities by IDs.
func (eu *ElementUpdate) RemoveLocationIDs(ids ...int) *ElementUpdate {
	eu.mutation.RemoveLocationIDs(ids...)
	return eu
}

// RemoveLocations removes "locations" edges to Resource entities.
func (eu *ElementUpdate) RemoveLocations(r ...*Resource) *ElementUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveLocationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ElementUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ElementUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ElementUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ElementUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *ElementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(element.Table, element.Columns, sqlgraph.NewFieldSpec(element.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.ResourceType(); ok {
		_spec.SetField(element.FieldResourceType, field.TypeString, value)
	}
	if value, ok := eu.mutation.LocatorType(); ok {
		_spec.SetField(element.FieldLocatorType, field.TypeString, value)
	}
	if eu.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.StatementsTable,
			Columns: []string{element.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedStatementsIDs(); len(nodes) > 0 && !eu.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.StatementsTable,
			Columns: []string{element.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.StatementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.StatementsTable,
			Columns: []string{element.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.ResourcesTable,
			Columns: []string{element.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !eu.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.ResourcesTable,
			Columns: []string{element.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.ResourcesTable,
			Columns: []string{element.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.LocationsTable,
			Columns: []string{element.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !eu.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.LocationsTable,
			Columns: []string{element.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.LocationsTable,
			Columns: []string{element.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{element.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ElementUpdateOne is the builder for updating a single Element entity.
type ElementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ElementMutation
}

// SetResourceType sets the "resourceType" field.
func (euo *ElementUpdateOne) SetResourceType(s string) *ElementUpdateOne {
	euo.mutation.SetResourceType(s)
	return euo
}

// SetLocatorType sets the "locatorType" field.
func (euo *ElementUpdateOne) SetLocatorType(s string) *ElementUpdateOne {
	euo.mutation.SetLocatorType(s)
	return euo
}

// AddStatementIDs adds the "statements" edge to the Statement entity by IDs.
func (euo *ElementUpdateOne) AddStatementIDs(ids ...int) *ElementUpdateOne {
	euo.mutation.AddStatementIDs(ids...)
	return euo
}

// AddStatements adds the "statements" edges to the Statement entity.
func (euo *ElementUpdateOne) AddStatements(s ...*Statement) *ElementUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddStatementIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (euo *ElementUpdateOne) AddResourceIDs(ids ...int) *ElementUpdateOne {
	euo.mutation.AddResourceIDs(ids...)
	return euo
}

// AddResources adds the "resources" edges to the Resource entity.
func (euo *ElementUpdateOne) AddResources(r ...*Resource) *ElementUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddResourceIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Resource entity by IDs.
func (euo *ElementUpdateOne) AddLocationIDs(ids ...int) *ElementUpdateOne {
	euo.mutation.AddLocationIDs(ids...)
	return euo
}

// AddLocations adds the "locations" edges to the Resource entity.
func (euo *ElementUpdateOne) AddLocations(r ...*Resource) *ElementUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddLocationIDs(ids...)
}

// Mutation returns the ElementMutation object of the builder.
func (euo *ElementUpdateOne) Mutation() *ElementMutation {
	return euo.mutation
}

// ClearStatements clears all "statements" edges to the Statement entity.
func (euo *ElementUpdateOne) ClearStatements() *ElementUpdateOne {
	euo.mutation.ClearStatements()
	return euo
}

// RemoveStatementIDs removes the "statements" edge to Statement entities by IDs.
func (euo *ElementUpdateOne) RemoveStatementIDs(ids ...int) *ElementUpdateOne {
	euo.mutation.RemoveStatementIDs(ids...)
	return euo
}

// RemoveStatements removes "statements" edges to Statement entities.
func (euo *ElementUpdateOne) RemoveStatements(s ...*Statement) *ElementUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveStatementIDs(ids...)
}

// ClearResources clears all "resources" edges to the Resource entity.
func (euo *ElementUpdateOne) ClearResources() *ElementUpdateOne {
	euo.mutation.ClearResources()
	return euo
}

// RemoveResourceIDs removes the "resources" edge to Resource entities by IDs.
func (euo *ElementUpdateOne) RemoveResourceIDs(ids ...int) *ElementUpdateOne {
	euo.mutation.RemoveResourceIDs(ids...)
	return euo
}

// RemoveResources removes "resources" edges to Resource entities.
func (euo *ElementUpdateOne) RemoveResources(r ...*Resource) *ElementUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveResourceIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Resource entity.
func (euo *ElementUpdateOne) ClearLocations() *ElementUpdateOne {
	euo.mutation.ClearLocations()
	return euo
}

// RemoveLocationIDs removes the "locations" edge to Resource entities by IDs.
func (euo *ElementUpdateOne) RemoveLocationIDs(ids ...int) *ElementUpdateOne {
	euo.mutation.RemoveLocationIDs(ids...)
	return euo
}

// RemoveLocations removes "locations" edges to Resource entities.
func (euo *ElementUpdateOne) RemoveLocations(r ...*Resource) *ElementUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveLocationIDs(ids...)
}

// Where appends a list predicates to the ElementUpdate builder.
func (euo *ElementUpdateOne) Where(ps ...predicate.Element) *ElementUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ElementUpdateOne) Select(field string, fields ...string) *ElementUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Element entity.
func (euo *ElementUpdateOne) Save(ctx context.Context) (*Element, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ElementUpdateOne) SaveX(ctx context.Context) *Element {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ElementUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ElementUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *ElementUpdateOne) sqlSave(ctx context.Context) (_node *Element, err error) {
	_spec := sqlgraph.NewUpdateSpec(element.Table, element.Columns, sqlgraph.NewFieldSpec(element.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Element.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, element.FieldID)
		for _, f := range fields {
			if !element.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != element.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.ResourceType(); ok {
		_spec.SetField(element.FieldResourceType, field.TypeString, value)
	}
	if value, ok := euo.mutation.LocatorType(); ok {
		_spec.SetField(element.FieldLocatorType, field.TypeString, value)
	}
	if euo.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.StatementsTable,
			Columns: []string{element.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedStatementsIDs(); len(nodes) > 0 && !euo.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.StatementsTable,
			Columns: []string{element.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.StatementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.StatementsTable,
			Columns: []string{element.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.ResourcesTable,
			Columns: []string{element.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !euo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.ResourcesTable,
			Columns: []string{element.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.ResourcesTable,
			Columns: []string{element.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.LocationsTable,
			Columns: []string{element.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !euo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.LocationsTable,
			Columns: []string{element.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.LocationsTable,
			Columns: []string{element.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Element{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{element.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
