// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"zotregistry.io/zot/ent/element"
	"zotregistry.io/zot/ent/resource"
	"zotregistry.io/zot/ent/statement"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *ElementQuery) CollectFields(ctx context.Context, satisfies ...string) (*ElementQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return e, nil
	}
	if err := e.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return e, nil
}

func (e *ElementQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(element.Columns))
		selectedFields = []string{element.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "statements":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&StatementClient{config: e.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, statementImplementors)...); err != nil {
				return err
			}
			e.WithNamedStatements(alias, func(wq *StatementQuery) {
				*wq = *query
			})
		case "resources":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ResourceClient{config: e.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, resourceImplementors)...); err != nil {
				return err
			}
			e.WithNamedResources(alias, func(wq *ResourceQuery) {
				*wq = *query
			})
		case "locations":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ResourceClient{config: e.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, resourceImplementors)...); err != nil {
				return err
			}
			e.WithNamedLocations(alias, func(wq *ResourceQuery) {
				*wq = *query
			})
		case "resourcetype":
			if _, ok := fieldSeen[element.FieldResourceType]; !ok {
				selectedFields = append(selectedFields, element.FieldResourceType)
				fieldSeen[element.FieldResourceType] = struct{}{}
			}
		case "locatortype":
			if _, ok := fieldSeen[element.FieldLocatorType]; !ok {
				selectedFields = append(selectedFields, element.FieldLocatorType)
				fieldSeen[element.FieldLocatorType] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		e.Select(selectedFields...)
	}
	return nil
}

type elementPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ElementPaginateOption
}

func newElementPaginateArgs(rv map[string]any) *elementPaginateArgs {
	args := &elementPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*ElementWhereInput); ok {
		args.opts = append(args.opts, WithElementFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *ResourceQuery) CollectFields(ctx context.Context, satisfies ...string) (*ResourceQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return r, nil
	}
	if err := r.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return r, nil
}

func (r *ResourceQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(resource.Columns))
		selectedFields = []string{resource.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "elements":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ElementClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, elementImplementors)...); err != nil {
				return err
			}
			r.WithNamedElements(alias, func(wq *ElementQuery) {
				*wq = *query
			})
		case "message":
			if _, ok := fieldSeen[resource.FieldMessage]; !ok {
				selectedFields = append(selectedFields, resource.FieldMessage)
				fieldSeen[resource.FieldMessage] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		r.Select(selectedFields...)
	}
	return nil
}

type resourcePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ResourcePaginateOption
}

func newResourcePaginateArgs(rv map[string]any) *resourcePaginateArgs {
	args := &resourcePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*ResourceWhereInput); ok {
		args.opts = append(args.opts, WithResourceFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *StatementQuery) CollectFields(ctx context.Context, satisfies ...string) (*StatementQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return s, nil
	}
	if err := s.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return s, nil
}

func (s *StatementQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(statement.Columns))
		selectedFields = []string{statement.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "objects":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ElementClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, elementImplementors)...); err != nil {
				return err
			}
			s.WithNamedObjects(alias, func(wq *ElementQuery) {
				*wq = *query
			})
		case "predicates":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ElementClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, elementImplementors)...); err != nil {
				return err
			}
			s.WithNamedPredicates(alias, func(wq *ElementQuery) {
				*wq = *query
			})
		case "subjects":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ElementClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, elementImplementors)...); err != nil {
				return err
			}
			s.WithNamedSubjects(alias, func(wq *ElementQuery) {
				*wq = *query
			})
		case "statements":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ElementClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, elementImplementors)...); err != nil {
				return err
			}
			s.WithNamedStatements(alias, func(wq *ElementQuery) {
				*wq = *query
			})
		case "mediatype":
			if _, ok := fieldSeen[statement.FieldMediaType]; !ok {
				selectedFields = append(selectedFields, statement.FieldMediaType)
				fieldSeen[statement.FieldMediaType] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		s.Select(selectedFields...)
	}
	return nil
}

type statementPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []StatementPaginateOption
}

func newStatementPaginateArgs(rv map[string]any) *statementPaginateArgs {
	args := &statementPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*StatementWhereInput); ok {
		args.opts = append(args.opts, WithStatementFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
