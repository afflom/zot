// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"zotregistry.io/zot/ent/object"
	"zotregistry.io/zot/ent/spredicate"
	"zotregistry.io/zot/ent/statement"
	"zotregistry.io/zot/ent/subject"
)

// StatementCreate is the builder for creating a Statement entity.
type StatementCreate struct {
	config
	mutation *StatementMutation
	hooks    []Hook
}

// SetNamespace sets the "namespace" field.
func (sc *StatementCreate) SetNamespace(s string) *StatementCreate {
	sc.mutation.SetNamespace(s)
	return sc
}

// SetStatement sets the "statement" field.
func (sc *StatementCreate) SetStatement(m map[string]interface{}) *StatementCreate {
	sc.mutation.SetStatement(m)
	return sc
}

// AddObjectIDs adds the "objects" edge to the Object entity by IDs.
func (sc *StatementCreate) AddObjectIDs(ids ...int) *StatementCreate {
	sc.mutation.AddObjectIDs(ids...)
	return sc
}

// AddObjects adds the "objects" edges to the Object entity.
func (sc *StatementCreate) AddObjects(o ...*Object) *StatementCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sc.AddObjectIDs(ids...)
}

// AddPredicateIDs adds the "predicates" edge to the Spredicate entity by IDs.
func (sc *StatementCreate) AddPredicateIDs(ids ...int) *StatementCreate {
	sc.mutation.AddPredicateIDs(ids...)
	return sc
}

// AddPredicates adds the "predicates" edges to the Spredicate entity.
func (sc *StatementCreate) AddPredicates(s ...*Spredicate) *StatementCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddPredicateIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (sc *StatementCreate) AddSubjectIDs(ids ...int) *StatementCreate {
	sc.mutation.AddSubjectIDs(ids...)
	return sc
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (sc *StatementCreate) AddSubjects(s ...*Subject) *StatementCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSubjectIDs(ids...)
}

// Mutation returns the StatementMutation object of the builder.
func (sc *StatementCreate) Mutation() *StatementMutation {
	return sc.mutation
}

// Save creates the Statement in the database.
func (sc *StatementCreate) Save(ctx context.Context) (*Statement, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StatementCreate) SaveX(ctx context.Context) *Statement {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StatementCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StatementCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StatementCreate) check() error {
	if _, ok := sc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required field "Statement.namespace"`)}
	}
	if _, ok := sc.mutation.Statement(); !ok {
		return &ValidationError{Name: "statement", err: errors.New(`ent: missing required field "Statement.statement"`)}
	}
	return nil
}

func (sc *StatementCreate) sqlSave(ctx context.Context) (*Statement, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StatementCreate) createSpec() (*Statement, *sqlgraph.CreateSpec) {
	var (
		_node = &Statement{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(statement.Table, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Namespace(); ok {
		_spec.SetField(statement.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := sc.mutation.Statement(); ok {
		_spec.SetField(statement.FieldStatement, field.TypeJSON, value)
		_node.Statement = value
	}
	if nodes := sc.mutation.ObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.ObjectsTable,
			Columns: statement.ObjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(object.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PredicatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.PredicatesTable,
			Columns: statement.PredicatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spredicate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.SubjectsTable,
			Columns: statement.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StatementCreateBulk is the builder for creating many Statement entities in bulk.
type StatementCreateBulk struct {
	config
	builders []*StatementCreate
}

// Save creates the Statement entities in the database.
func (scb *StatementCreateBulk) Save(ctx context.Context) ([]*Statement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Statement, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StatementCreateBulk) SaveX(ctx context.Context) []*Statement {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StatementCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StatementCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
