// Code generated by ent, DO NOT EDIT.

package ent

import (
	"zotregistry.io/zot/ent/element"
	"zotregistry.io/zot/ent/predicate"
	"zotregistry.io/zot/ent/resource"
	"zotregistry.io/zot/ent/statement"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 3)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   element.Table,
			Columns: element.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: element.FieldID,
			},
		},
		Type: "Element",
		Fields: map[string]*sqlgraph.FieldSpec{
			element.FieldResourceType: {Type: field.TypeString, Column: element.FieldResourceType},
			element.FieldLocatorType:  {Type: field.TypeString, Column: element.FieldLocatorType},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   resource.Table,
			Columns: resource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resource.FieldID,
			},
		},
		Type: "Resource",
		Fields: map[string]*sqlgraph.FieldSpec{
			resource.FieldMessage: {Type: field.TypeJSON, Column: resource.FieldMessage},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   statement.Table,
			Columns: statement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statement.FieldID,
			},
		},
		Type: "Statement",
		Fields: map[string]*sqlgraph.FieldSpec{
			statement.FieldMediaType: {Type: field.TypeString, Column: statement.FieldMediaType},
		},
	}
	graph.MustAddE(
		"statements",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.StatementsTable,
			Columns: []string{element.StatementsColumn},
			Bidi:    false,
		},
		"Element",
		"Statement",
	)
	graph.MustAddE(
		"resources",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.ResourcesTable,
			Columns: []string{element.ResourcesColumn},
			Bidi:    false,
		},
		"Element",
		"Resource",
	)
	graph.MustAddE(
		"locations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.LocationsTable,
			Columns: []string{element.LocationsColumn},
			Bidi:    false,
		},
		"Element",
		"Resource",
	)
	graph.MustAddE(
		"elements",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ElementsTable,
			Columns: []string{resource.ElementsColumn},
			Bidi:    false,
		},
		"Resource",
		"Element",
	)
	graph.MustAddE(
		"objects",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statement.ObjectsTable,
			Columns: []string{statement.ObjectsColumn},
			Bidi:    false,
		},
		"Statement",
		"Element",
	)
	graph.MustAddE(
		"predicates",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statement.PredicatesTable,
			Columns: []string{statement.PredicatesColumn},
			Bidi:    false,
		},
		"Statement",
		"Element",
	)
	graph.MustAddE(
		"subjects",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statement.SubjectsTable,
			Columns: []string{statement.SubjectsColumn},
			Bidi:    false,
		},
		"Statement",
		"Element",
	)
	graph.MustAddE(
		"statements",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statement.StatementsTable,
			Columns: []string{statement.StatementsColumn},
			Bidi:    false,
		},
		"Statement",
		"Element",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (eq *ElementQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ElementQuery builder.
func (eq *ElementQuery) Filter() *ElementFilter {
	return &ElementFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *ElementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ElementMutation builder.
func (m *ElementMutation) Filter() *ElementFilter {
	return &ElementFilter{config: m.config, predicateAdder: m}
}

// ElementFilter provides a generic filtering capability at runtime for ElementQuery.
type ElementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ElementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ElementFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(element.FieldID))
}

// WhereResourceType applies the entql string predicate on the resourceType field.
func (f *ElementFilter) WhereResourceType(p entql.StringP) {
	f.Where(p.Field(element.FieldResourceType))
}

// WhereLocatorType applies the entql string predicate on the locatorType field.
func (f *ElementFilter) WhereLocatorType(p entql.StringP) {
	f.Where(p.Field(element.FieldLocatorType))
}

// WhereHasStatements applies a predicate to check if query has an edge statements.
func (f *ElementFilter) WhereHasStatements() {
	f.Where(entql.HasEdge("statements"))
}

// WhereHasStatementsWith applies a predicate to check if query has an edge statements with a given conditions (other predicates).
func (f *ElementFilter) WhereHasStatementsWith(preds ...predicate.Statement) {
	f.Where(entql.HasEdgeWith("statements", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasResources applies a predicate to check if query has an edge resources.
func (f *ElementFilter) WhereHasResources() {
	f.Where(entql.HasEdge("resources"))
}

// WhereHasResourcesWith applies a predicate to check if query has an edge resources with a given conditions (other predicates).
func (f *ElementFilter) WhereHasResourcesWith(preds ...predicate.Resource) {
	f.Where(entql.HasEdgeWith("resources", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLocations applies a predicate to check if query has an edge locations.
func (f *ElementFilter) WhereHasLocations() {
	f.Where(entql.HasEdge("locations"))
}

// WhereHasLocationsWith applies a predicate to check if query has an edge locations with a given conditions (other predicates).
func (f *ElementFilter) WhereHasLocationsWith(preds ...predicate.Resource) {
	f.Where(entql.HasEdgeWith("locations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *ResourceQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ResourceQuery builder.
func (rq *ResourceQuery) Filter() *ResourceFilter {
	return &ResourceFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *ResourceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ResourceMutation builder.
func (m *ResourceMutation) Filter() *ResourceFilter {
	return &ResourceFilter{config: m.config, predicateAdder: m}
}

// ResourceFilter provides a generic filtering capability at runtime for ResourceQuery.
type ResourceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ResourceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ResourceFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(resource.FieldID))
}

// WhereMessage applies the entql json.RawMessage predicate on the message field.
func (f *ResourceFilter) WhereMessage(p entql.BytesP) {
	f.Where(p.Field(resource.FieldMessage))
}

// WhereHasElements applies a predicate to check if query has an edge elements.
func (f *ResourceFilter) WhereHasElements() {
	f.Where(entql.HasEdge("elements"))
}

// WhereHasElementsWith applies a predicate to check if query has an edge elements with a given conditions (other predicates).
func (f *ResourceFilter) WhereHasElementsWith(preds ...predicate.Element) {
	f.Where(entql.HasEdgeWith("elements", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *StatementQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StatementQuery builder.
func (sq *StatementQuery) Filter() *StatementFilter {
	return &StatementFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StatementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StatementMutation builder.
func (m *StatementMutation) Filter() *StatementFilter {
	return &StatementFilter{config: m.config, predicateAdder: m}
}

// StatementFilter provides a generic filtering capability at runtime for StatementQuery.
type StatementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StatementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *StatementFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(statement.FieldID))
}

// WhereMediaType applies the entql string predicate on the mediaType field.
func (f *StatementFilter) WhereMediaType(p entql.StringP) {
	f.Where(p.Field(statement.FieldMediaType))
}

// WhereHasObjects applies a predicate to check if query has an edge objects.
func (f *StatementFilter) WhereHasObjects() {
	f.Where(entql.HasEdge("objects"))
}

// WhereHasObjectsWith applies a predicate to check if query has an edge objects with a given conditions (other predicates).
func (f *StatementFilter) WhereHasObjectsWith(preds ...predicate.Element) {
	f.Where(entql.HasEdgeWith("objects", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPredicates applies a predicate to check if query has an edge predicates.
func (f *StatementFilter) WhereHasPredicates() {
	f.Where(entql.HasEdge("predicates"))
}

// WhereHasPredicatesWith applies a predicate to check if query has an edge predicates with a given conditions (other predicates).
func (f *StatementFilter) WhereHasPredicatesWith(preds ...predicate.Element) {
	f.Where(entql.HasEdgeWith("predicates", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubjects applies a predicate to check if query has an edge subjects.
func (f *StatementFilter) WhereHasSubjects() {
	f.Where(entql.HasEdge("subjects"))
}

// WhereHasSubjectsWith applies a predicate to check if query has an edge subjects with a given conditions (other predicates).
func (f *StatementFilter) WhereHasSubjectsWith(preds ...predicate.Element) {
	f.Where(entql.HasEdgeWith("subjects", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStatements applies a predicate to check if query has an edge statements.
func (f *StatementFilter) WhereHasStatements() {
	f.Where(entql.HasEdge("statements"))
}

// WhereHasStatementsWith applies a predicate to check if query has an edge statements with a given conditions (other predicates).
func (f *StatementFilter) WhereHasStatementsWith(preds ...predicate.Element) {
	f.Where(entql.HasEdgeWith("statements", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
