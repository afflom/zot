// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"zotregistry.io/zot/ent/element"
	"zotregistry.io/zot/ent/resource"
	"zotregistry.io/zot/ent/statement"
)

// ElementCreate is the builder for creating a Element entity.
type ElementCreate struct {
	config
	mutation *ElementMutation
	hooks    []Hook
}

// SetResourceType sets the "resourceType" field.
func (ec *ElementCreate) SetResourceType(s string) *ElementCreate {
	ec.mutation.SetResourceType(s)
	return ec
}

// SetLocatorType sets the "locatorType" field.
func (ec *ElementCreate) SetLocatorType(s string) *ElementCreate {
	ec.mutation.SetLocatorType(s)
	return ec
}

// AddStatementIDs adds the "statements" edge to the Statement entity by IDs.
func (ec *ElementCreate) AddStatementIDs(ids ...int) *ElementCreate {
	ec.mutation.AddStatementIDs(ids...)
	return ec
}

// AddStatements adds the "statements" edges to the Statement entity.
func (ec *ElementCreate) AddStatements(s ...*Statement) *ElementCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ec.AddStatementIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (ec *ElementCreate) AddResourceIDs(ids ...int) *ElementCreate {
	ec.mutation.AddResourceIDs(ids...)
	return ec
}

// AddResources adds the "resources" edges to the Resource entity.
func (ec *ElementCreate) AddResources(r ...*Resource) *ElementCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ec.AddResourceIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Resource entity by IDs.
func (ec *ElementCreate) AddLocationIDs(ids ...int) *ElementCreate {
	ec.mutation.AddLocationIDs(ids...)
	return ec
}

// AddLocations adds the "locations" edges to the Resource entity.
func (ec *ElementCreate) AddLocations(r ...*Resource) *ElementCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ec.AddLocationIDs(ids...)
}

// Mutation returns the ElementMutation object of the builder.
func (ec *ElementCreate) Mutation() *ElementMutation {
	return ec.mutation
}

// Save creates the Element in the database.
func (ec *ElementCreate) Save(ctx context.Context) (*Element, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ElementCreate) SaveX(ctx context.Context) *Element {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ElementCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ElementCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ElementCreate) check() error {
	if _, ok := ec.mutation.ResourceType(); !ok {
		return &ValidationError{Name: "resourceType", err: errors.New(`ent: missing required field "Element.resourceType"`)}
	}
	if _, ok := ec.mutation.LocatorType(); !ok {
		return &ValidationError{Name: "locatorType", err: errors.New(`ent: missing required field "Element.locatorType"`)}
	}
	return nil
}

func (ec *ElementCreate) sqlSave(ctx context.Context) (*Element, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ElementCreate) createSpec() (*Element, *sqlgraph.CreateSpec) {
	var (
		_node = &Element{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(element.Table, sqlgraph.NewFieldSpec(element.FieldID, field.TypeInt))
	)
	if value, ok := ec.mutation.ResourceType(); ok {
		_spec.SetField(element.FieldResourceType, field.TypeString, value)
		_node.ResourceType = value
	}
	if value, ok := ec.mutation.LocatorType(); ok {
		_spec.SetField(element.FieldLocatorType, field.TypeString, value)
		_node.LocatorType = value
	}
	if nodes := ec.mutation.StatementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.StatementsTable,
			Columns: []string{element.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.ResourcesTable,
			Columns: []string{element.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   element.LocationsTable,
			Columns: []string{element.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ElementCreateBulk is the builder for creating many Element entities in bulk.
type ElementCreateBulk struct {
	config
	builders []*ElementCreate
}

// Save creates the Element entities in the database.
func (ecb *ElementCreateBulk) Save(ctx context.Context) ([]*Element, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Element, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ElementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ElementCreateBulk) SaveX(ctx context.Context) []*Element {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ElementCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ElementCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
