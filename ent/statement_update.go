// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"zotregistry.io/zot/ent/object"
	"zotregistry.io/zot/ent/predicate"
	"zotregistry.io/zot/ent/spredicate"
	"zotregistry.io/zot/ent/statement"
	"zotregistry.io/zot/ent/subject"
)

// StatementUpdate is the builder for updating Statement entities.
type StatementUpdate struct {
	config
	hooks    []Hook
	mutation *StatementMutation
}

// Where appends a list predicates to the StatementUpdate builder.
func (su *StatementUpdate) Where(ps ...predicate.Statement) *StatementUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetNamespace sets the "namespace" field.
func (su *StatementUpdate) SetNamespace(s string) *StatementUpdate {
	su.mutation.SetNamespace(s)
	return su
}

// SetStatement sets the "statement" field.
func (su *StatementUpdate) SetStatement(m map[string]interface{}) *StatementUpdate {
	su.mutation.SetStatement(m)
	return su
}

// AddObjectIDs adds the "objects" edge to the Object entity by IDs.
func (su *StatementUpdate) AddObjectIDs(ids ...int) *StatementUpdate {
	su.mutation.AddObjectIDs(ids...)
	return su
}

// AddObjects adds the "objects" edges to the Object entity.
func (su *StatementUpdate) AddObjects(o ...*Object) *StatementUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return su.AddObjectIDs(ids...)
}

// AddPredicateIDs adds the "predicates" edge to the Spredicate entity by IDs.
func (su *StatementUpdate) AddPredicateIDs(ids ...int) *StatementUpdate {
	su.mutation.AddPredicateIDs(ids...)
	return su
}

// AddPredicates adds the "predicates" edges to the Spredicate entity.
func (su *StatementUpdate) AddPredicates(s ...*Spredicate) *StatementUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddPredicateIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (su *StatementUpdate) AddSubjectIDs(ids ...int) *StatementUpdate {
	su.mutation.AddSubjectIDs(ids...)
	return su
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (su *StatementUpdate) AddSubjects(s ...*Subject) *StatementUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSubjectIDs(ids...)
}

// Mutation returns the StatementMutation object of the builder.
func (su *StatementUpdate) Mutation() *StatementMutation {
	return su.mutation
}

// ClearObjects clears all "objects" edges to the Object entity.
func (su *StatementUpdate) ClearObjects() *StatementUpdate {
	su.mutation.ClearObjects()
	return su
}

// RemoveObjectIDs removes the "objects" edge to Object entities by IDs.
func (su *StatementUpdate) RemoveObjectIDs(ids ...int) *StatementUpdate {
	su.mutation.RemoveObjectIDs(ids...)
	return su
}

// RemoveObjects removes "objects" edges to Object entities.
func (su *StatementUpdate) RemoveObjects(o ...*Object) *StatementUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return su.RemoveObjectIDs(ids...)
}

// ClearPredicates clears all "predicates" edges to the Spredicate entity.
func (su *StatementUpdate) ClearPredicates() *StatementUpdate {
	su.mutation.ClearPredicates()
	return su
}

// RemovePredicateIDs removes the "predicates" edge to Spredicate entities by IDs.
func (su *StatementUpdate) RemovePredicateIDs(ids ...int) *StatementUpdate {
	su.mutation.RemovePredicateIDs(ids...)
	return su
}

// RemovePredicates removes "predicates" edges to Spredicate entities.
func (su *StatementUpdate) RemovePredicates(s ...*Spredicate) *StatementUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemovePredicateIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the Subject entity.
func (su *StatementUpdate) ClearSubjects() *StatementUpdate {
	su.mutation.ClearSubjects()
	return su
}

// RemoveSubjectIDs removes the "subjects" edge to Subject entities by IDs.
func (su *StatementUpdate) RemoveSubjectIDs(ids ...int) *StatementUpdate {
	su.mutation.RemoveSubjectIDs(ids...)
	return su
}

// RemoveSubjects removes "subjects" edges to Subject entities.
func (su *StatementUpdate) RemoveSubjects(s ...*Subject) *StatementUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSubjectIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StatementUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StatementUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StatementUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StatementUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StatementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(statement.Table, statement.Columns, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Namespace(); ok {
		_spec.SetField(statement.FieldNamespace, field.TypeString, value)
	}
	if value, ok := su.mutation.Statement(); ok {
		_spec.SetField(statement.FieldStatement, field.TypeJSON, value)
	}
	if su.mutation.ObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.ObjectsTable,
			Columns: statement.ObjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(object.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedObjectsIDs(); len(nodes) > 0 && !su.mutation.ObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.ObjectsTable,
			Columns: statement.ObjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(object.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.ObjectsTable,
			Columns: statement.ObjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(object.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PredicatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.PredicatesTable,
			Columns: statement.PredicatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spredicate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPredicatesIDs(); len(nodes) > 0 && !su.mutation.PredicatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.PredicatesTable,
			Columns: statement.PredicatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spredicate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PredicatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.PredicatesTable,
			Columns: statement.PredicatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spredicate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.SubjectsTable,
			Columns: statement.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !su.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.SubjectsTable,
			Columns: statement.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.SubjectsTable,
			Columns: statement.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StatementUpdateOne is the builder for updating a single Statement entity.
type StatementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatementMutation
}

// SetNamespace sets the "namespace" field.
func (suo *StatementUpdateOne) SetNamespace(s string) *StatementUpdateOne {
	suo.mutation.SetNamespace(s)
	return suo
}

// SetStatement sets the "statement" field.
func (suo *StatementUpdateOne) SetStatement(m map[string]interface{}) *StatementUpdateOne {
	suo.mutation.SetStatement(m)
	return suo
}

// AddObjectIDs adds the "objects" edge to the Object entity by IDs.
func (suo *StatementUpdateOne) AddObjectIDs(ids ...int) *StatementUpdateOne {
	suo.mutation.AddObjectIDs(ids...)
	return suo
}

// AddObjects adds the "objects" edges to the Object entity.
func (suo *StatementUpdateOne) AddObjects(o ...*Object) *StatementUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return suo.AddObjectIDs(ids...)
}

// AddPredicateIDs adds the "predicates" edge to the Spredicate entity by IDs.
func (suo *StatementUpdateOne) AddPredicateIDs(ids ...int) *StatementUpdateOne {
	suo.mutation.AddPredicateIDs(ids...)
	return suo
}

// AddPredicates adds the "predicates" edges to the Spredicate entity.
func (suo *StatementUpdateOne) AddPredicates(s ...*Spredicate) *StatementUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddPredicateIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (suo *StatementUpdateOne) AddSubjectIDs(ids ...int) *StatementUpdateOne {
	suo.mutation.AddSubjectIDs(ids...)
	return suo
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (suo *StatementUpdateOne) AddSubjects(s ...*Subject) *StatementUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSubjectIDs(ids...)
}

// Mutation returns the StatementMutation object of the builder.
func (suo *StatementUpdateOne) Mutation() *StatementMutation {
	return suo.mutation
}

// ClearObjects clears all "objects" edges to the Object entity.
func (suo *StatementUpdateOne) ClearObjects() *StatementUpdateOne {
	suo.mutation.ClearObjects()
	return suo
}

// RemoveObjectIDs removes the "objects" edge to Object entities by IDs.
func (suo *StatementUpdateOne) RemoveObjectIDs(ids ...int) *StatementUpdateOne {
	suo.mutation.RemoveObjectIDs(ids...)
	return suo
}

// RemoveObjects removes "objects" edges to Object entities.
func (suo *StatementUpdateOne) RemoveObjects(o ...*Object) *StatementUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return suo.RemoveObjectIDs(ids...)
}

// ClearPredicates clears all "predicates" edges to the Spredicate entity.
func (suo *StatementUpdateOne) ClearPredicates() *StatementUpdateOne {
	suo.mutation.ClearPredicates()
	return suo
}

// RemovePredicateIDs removes the "predicates" edge to Spredicate entities by IDs.
func (suo *StatementUpdateOne) RemovePredicateIDs(ids ...int) *StatementUpdateOne {
	suo.mutation.RemovePredicateIDs(ids...)
	return suo
}

// RemovePredicates removes "predicates" edges to Spredicate entities.
func (suo *StatementUpdateOne) RemovePredicates(s ...*Spredicate) *StatementUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemovePredicateIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the Subject entity.
func (suo *StatementUpdateOne) ClearSubjects() *StatementUpdateOne {
	suo.mutation.ClearSubjects()
	return suo
}

// RemoveSubjectIDs removes the "subjects" edge to Subject entities by IDs.
func (suo *StatementUpdateOne) RemoveSubjectIDs(ids ...int) *StatementUpdateOne {
	suo.mutation.RemoveSubjectIDs(ids...)
	return suo
}

// RemoveSubjects removes "subjects" edges to Subject entities.
func (suo *StatementUpdateOne) RemoveSubjects(s ...*Subject) *StatementUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSubjectIDs(ids...)
}

// Where appends a list predicates to the StatementUpdate builder.
func (suo *StatementUpdateOne) Where(ps ...predicate.Statement) *StatementUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StatementUpdateOne) Select(field string, fields ...string) *StatementUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Statement entity.
func (suo *StatementUpdateOne) Save(ctx context.Context) (*Statement, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StatementUpdateOne) SaveX(ctx context.Context) *Statement {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StatementUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StatementUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StatementUpdateOne) sqlSave(ctx context.Context) (_node *Statement, err error) {
	_spec := sqlgraph.NewUpdateSpec(statement.Table, statement.Columns, sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Statement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statement.FieldID)
		for _, f := range fields {
			if !statement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Namespace(); ok {
		_spec.SetField(statement.FieldNamespace, field.TypeString, value)
	}
	if value, ok := suo.mutation.Statement(); ok {
		_spec.SetField(statement.FieldStatement, field.TypeJSON, value)
	}
	if suo.mutation.ObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.ObjectsTable,
			Columns: statement.ObjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(object.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedObjectsIDs(); len(nodes) > 0 && !suo.mutation.ObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.ObjectsTable,
			Columns: statement.ObjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(object.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.ObjectsTable,
			Columns: statement.ObjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(object.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PredicatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.PredicatesTable,
			Columns: statement.PredicatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spredicate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPredicatesIDs(); len(nodes) > 0 && !suo.mutation.PredicatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.PredicatesTable,
			Columns: statement.PredicatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spredicate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PredicatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.PredicatesTable,
			Columns: statement.PredicatesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spredicate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.SubjectsTable,
			Columns: statement.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !suo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.SubjectsTable,
			Columns: statement.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statement.SubjectsTable,
			Columns: statement.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Statement{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
