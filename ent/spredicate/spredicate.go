// Code generated by ent, DO NOT EDIT.

package spredicate

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the spredicate type in the database.
	Label = "spredicate"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPredicateType holds the string denoting the predicatetype field in the database.
	FieldPredicateType = "predicate_type"
	// FieldPredicate holds the string denoting the predicate field in the database.
	FieldPredicate = "predicate"
	// EdgeStatement holds the string denoting the statement edge name in mutations.
	EdgeStatement = "statement"
	// Table holds the table name of the spredicate in the database.
	Table = "spredicates"
	// StatementTable is the table that holds the statement relation/edge. The primary key declared below.
	StatementTable = "statement_predicates"
	// StatementInverseTable is the table name for the Statement entity.
	// It exists in this package in order to avoid circular dependency with the "statement" package.
	StatementInverseTable = "statements"
)

// Columns holds all SQL columns for spredicate fields.
var Columns = []string{
	FieldID,
	FieldPredicateType,
	FieldPredicate,
}

var (
	// StatementPrimaryKey and StatementColumn2 are the table columns denoting the
	// primary key for the statement relation (M2M).
	StatementPrimaryKey = []string{"statement_id", "spredicate_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Spredicate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPredicateType orders the results by the predicateType field.
func ByPredicateType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPredicateType, opts...).ToFunc()
}

// ByStatementCount orders the results by statement count.
func ByStatementCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStatementStep(), opts...)
	}
}

// ByStatement orders the results by statement terms.
func ByStatement(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatementStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStatementStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatementInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, StatementTable, StatementPrimaryKey...),
	)
}
