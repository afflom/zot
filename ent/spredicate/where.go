// Code generated by ent, DO NOT EDIT.

package spredicate

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"zotregistry.io/zot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldLTE(FieldID, id))
}

// PredicateType applies equality check predicate on the "predicateType" field. It's identical to PredicateTypeEQ.
func PredicateType(v string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldEQ(FieldPredicateType, v))
}

// PredicateTypeEQ applies the EQ predicate on the "predicateType" field.
func PredicateTypeEQ(v string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldEQ(FieldPredicateType, v))
}

// PredicateTypeNEQ applies the NEQ predicate on the "predicateType" field.
func PredicateTypeNEQ(v string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldNEQ(FieldPredicateType, v))
}

// PredicateTypeIn applies the In predicate on the "predicateType" field.
func PredicateTypeIn(vs ...string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldIn(FieldPredicateType, vs...))
}

// PredicateTypeNotIn applies the NotIn predicate on the "predicateType" field.
func PredicateTypeNotIn(vs ...string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldNotIn(FieldPredicateType, vs...))
}

// PredicateTypeGT applies the GT predicate on the "predicateType" field.
func PredicateTypeGT(v string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldGT(FieldPredicateType, v))
}

// PredicateTypeGTE applies the GTE predicate on the "predicateType" field.
func PredicateTypeGTE(v string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldGTE(FieldPredicateType, v))
}

// PredicateTypeLT applies the LT predicate on the "predicateType" field.
func PredicateTypeLT(v string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldLT(FieldPredicateType, v))
}

// PredicateTypeLTE applies the LTE predicate on the "predicateType" field.
func PredicateTypeLTE(v string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldLTE(FieldPredicateType, v))
}

// PredicateTypeContains applies the Contains predicate on the "predicateType" field.
func PredicateTypeContains(v string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldContains(FieldPredicateType, v))
}

// PredicateTypeHasPrefix applies the HasPrefix predicate on the "predicateType" field.
func PredicateTypeHasPrefix(v string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldHasPrefix(FieldPredicateType, v))
}

// PredicateTypeHasSuffix applies the HasSuffix predicate on the "predicateType" field.
func PredicateTypeHasSuffix(v string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldHasSuffix(FieldPredicateType, v))
}

// PredicateTypeEqualFold applies the EqualFold predicate on the "predicateType" field.
func PredicateTypeEqualFold(v string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldEqualFold(FieldPredicateType, v))
}

// PredicateTypeContainsFold applies the ContainsFold predicate on the "predicateType" field.
func PredicateTypeContainsFold(v string) predicate.Spredicate {
	return predicate.Spredicate(sql.FieldContainsFold(FieldPredicateType, v))
}

// HasStatement applies the HasEdge predicate on the "statement" edge.
func HasStatement() predicate.Spredicate {
	return predicate.Spredicate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, StatementTable, StatementPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatementWith applies the HasEdge predicate on the "statement" edge with a given conditions (other predicates).
func HasStatementWith(preds ...predicate.Statement) predicate.Spredicate {
	return predicate.Spredicate(func(s *sql.Selector) {
		step := newStatementStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Spredicate) predicate.Spredicate {
	return predicate.Spredicate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Spredicate) predicate.Spredicate {
	return predicate.Spredicate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Spredicate) predicate.Spredicate {
	return predicate.Spredicate(func(s *sql.Selector) {
		p(s.Not())
	})
}
