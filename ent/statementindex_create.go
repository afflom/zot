// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"zotregistry.io/zot/ent/statementindex"
	"zotregistry.io/zot/pkg/search/schema"
)

// StatementIndexCreate is the builder for creating a StatementIndex entity.
type StatementIndexCreate struct {
	config
	mutation *StatementIndexMutation
	hooks    []Hook
}

// SetObject sets the "object" field.
func (sic *StatementIndexCreate) SetObject(s schema.Object) *StatementIndexCreate {
	sic.mutation.SetObject(s)
	return sic
}

// SetPredicate sets the "predicate" field.
func (sic *StatementIndexCreate) SetPredicate(s schema.Predicate) *StatementIndexCreate {
	sic.mutation.SetPredicate(s)
	return sic
}

// SetSubject sets the "subject" field.
func (sic *StatementIndexCreate) SetSubject(s schema.Subject) *StatementIndexCreate {
	sic.mutation.SetSubject(s)
	return sic
}

// SetStatement sets the "statement" field.
func (sic *StatementIndexCreate) SetStatement(s schema.Location) *StatementIndexCreate {
	sic.mutation.SetStatement(s)
	return sic
}

// Mutation returns the StatementIndexMutation object of the builder.
func (sic *StatementIndexCreate) Mutation() *StatementIndexMutation {
	return sic.mutation
}

// Save creates the StatementIndex in the database.
func (sic *StatementIndexCreate) Save(ctx context.Context) (*StatementIndex, error) {
	return withHooks(ctx, sic.sqlSave, sic.mutation, sic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sic *StatementIndexCreate) SaveX(ctx context.Context) *StatementIndex {
	v, err := sic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sic *StatementIndexCreate) Exec(ctx context.Context) error {
	_, err := sic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sic *StatementIndexCreate) ExecX(ctx context.Context) {
	if err := sic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sic *StatementIndexCreate) check() error {
	if _, ok := sic.mutation.Object(); !ok {
		return &ValidationError{Name: "object", err: errors.New(`ent: missing required field "StatementIndex.object"`)}
	}
	if _, ok := sic.mutation.Predicate(); !ok {
		return &ValidationError{Name: "predicate", err: errors.New(`ent: missing required field "StatementIndex.predicate"`)}
	}
	if _, ok := sic.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "StatementIndex.subject"`)}
	}
	if _, ok := sic.mutation.Statement(); !ok {
		return &ValidationError{Name: "statement", err: errors.New(`ent: missing required field "StatementIndex.statement"`)}
	}
	return nil
}

func (sic *StatementIndexCreate) sqlSave(ctx context.Context) (*StatementIndex, error) {
	if err := sic.check(); err != nil {
		return nil, err
	}
	_node, _spec := sic.createSpec()
	if err := sqlgraph.CreateNode(ctx, sic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sic.mutation.id = &_node.ID
	sic.mutation.done = true
	return _node, nil
}

func (sic *StatementIndexCreate) createSpec() (*StatementIndex, *sqlgraph.CreateSpec) {
	var (
		_node = &StatementIndex{config: sic.config}
		_spec = sqlgraph.NewCreateSpec(statementindex.Table, sqlgraph.NewFieldSpec(statementindex.FieldID, field.TypeInt))
	)
	if value, ok := sic.mutation.Object(); ok {
		_spec.SetField(statementindex.FieldObject, field.TypeJSON, value)
		_node.Object = value
	}
	if value, ok := sic.mutation.Predicate(); ok {
		_spec.SetField(statementindex.FieldPredicate, field.TypeJSON, value)
		_node.Predicate = value
	}
	if value, ok := sic.mutation.Subject(); ok {
		_spec.SetField(statementindex.FieldSubject, field.TypeJSON, value)
		_node.Subject = value
	}
	if value, ok := sic.mutation.Statement(); ok {
		_spec.SetField(statementindex.FieldStatement, field.TypeJSON, value)
		_node.Statement = value
	}
	return _node, _spec
}

// StatementIndexCreateBulk is the builder for creating many StatementIndex entities in bulk.
type StatementIndexCreateBulk struct {
	config
	builders []*StatementIndexCreate
}

// Save creates the StatementIndex entities in the database.
func (sicb *StatementIndexCreateBulk) Save(ctx context.Context) ([]*StatementIndex, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sicb.builders))
	nodes := make([]*StatementIndex, len(sicb.builders))
	mutators := make([]Mutator, len(sicb.builders))
	for i := range sicb.builders {
		func(i int, root context.Context) {
			builder := sicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatementIndexMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sicb *StatementIndexCreateBulk) SaveX(ctx context.Context) []*StatementIndex {
	v, err := sicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sicb *StatementIndexCreateBulk) Exec(ctx context.Context) error {
	_, err := sicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sicb *StatementIndexCreateBulk) ExecX(ctx context.Context) {
	if err := sicb.Exec(ctx); err != nil {
		panic(err)
	}
}
