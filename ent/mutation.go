// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"zotregistry.io/zot/ent/predicate"
	"zotregistry.io/zot/ent/statementindex"
	"zotregistry.io/zot/pkg/search/schema"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeStatementIndex = "StatementIndex"
)

// StatementIndexMutation represents an operation that mutates the StatementIndex nodes in the graph.
type StatementIndexMutation struct {
	config
	op            Op
	typ           string
	id            *int
	object        *schema.Object
	predicate     *schema.Predicate
	subject       *schema.Subject
	statement     *schema.Location
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*StatementIndex, error)
	predicates    []predicate.StatementIndex
}

var _ ent.Mutation = (*StatementIndexMutation)(nil)

// statementindexOption allows management of the mutation configuration using functional options.
type statementindexOption func(*StatementIndexMutation)

// newStatementIndexMutation creates new mutation for the StatementIndex entity.
func newStatementIndexMutation(c config, op Op, opts ...statementindexOption) *StatementIndexMutation {
	m := &StatementIndexMutation{
		config:        c,
		op:            op,
		typ:           TypeStatementIndex,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatementIndexID sets the ID field of the mutation.
func withStatementIndexID(id int) statementindexOption {
	return func(m *StatementIndexMutation) {
		var (
			err   error
			once  sync.Once
			value *StatementIndex
		)
		m.oldValue = func(ctx context.Context) (*StatementIndex, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StatementIndex.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatementIndex sets the old StatementIndex of the mutation.
func withStatementIndex(node *StatementIndex) statementindexOption {
	return func(m *StatementIndexMutation) {
		m.oldValue = func(context.Context) (*StatementIndex, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatementIndexMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatementIndexMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StatementIndexMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StatementIndexMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StatementIndex.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetObject sets the "object" field.
func (m *StatementIndexMutation) SetObject(s schema.Object) {
	m.object = &s
}

// Object returns the value of the "object" field in the mutation.
func (m *StatementIndexMutation) Object() (r schema.Object, exists bool) {
	v := m.object
	if v == nil {
		return
	}
	return *v, true
}

// OldObject returns the old "object" field's value of the StatementIndex entity.
// If the StatementIndex object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatementIndexMutation) OldObject(ctx context.Context) (v schema.Object, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObject: %w", err)
	}
	return oldValue.Object, nil
}

// ResetObject resets all changes to the "object" field.
func (m *StatementIndexMutation) ResetObject() {
	m.object = nil
}

// SetPredicate sets the "predicate" field.
func (m *StatementIndexMutation) SetPredicate(s schema.Predicate) {
	m.predicate = &s
}

// Predicate returns the value of the "predicate" field in the mutation.
func (m *StatementIndexMutation) Predicate() (r schema.Predicate, exists bool) {
	v := m.predicate
	if v == nil {
		return
	}
	return *v, true
}

// OldPredicate returns the old "predicate" field's value of the StatementIndex entity.
// If the StatementIndex object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatementIndexMutation) OldPredicate(ctx context.Context) (v schema.Predicate, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPredicate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPredicate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPredicate: %w", err)
	}
	return oldValue.Predicate, nil
}

// ResetPredicate resets all changes to the "predicate" field.
func (m *StatementIndexMutation) ResetPredicate() {
	m.predicate = nil
}

// SetSubject sets the "subject" field.
func (m *StatementIndexMutation) SetSubject(s schema.Subject) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *StatementIndexMutation) Subject() (r schema.Subject, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the StatementIndex entity.
// If the StatementIndex object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatementIndexMutation) OldSubject(ctx context.Context) (v schema.Subject, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ResetSubject resets all changes to the "subject" field.
func (m *StatementIndexMutation) ResetSubject() {
	m.subject = nil
}

// SetStatement sets the "statement" field.
func (m *StatementIndexMutation) SetStatement(s schema.Location) {
	m.statement = &s
}

// Statement returns the value of the "statement" field in the mutation.
func (m *StatementIndexMutation) Statement() (r schema.Location, exists bool) {
	v := m.statement
	if v == nil {
		return
	}
	return *v, true
}

// OldStatement returns the old "statement" field's value of the StatementIndex entity.
// If the StatementIndex object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatementIndexMutation) OldStatement(ctx context.Context) (v schema.Location, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatement is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatement requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatement: %w", err)
	}
	return oldValue.Statement, nil
}

// ResetStatement resets all changes to the "statement" field.
func (m *StatementIndexMutation) ResetStatement() {
	m.statement = nil
}

// Where appends a list predicates to the StatementIndexMutation builder.
func (m *StatementIndexMutation) Where(ps ...predicate.StatementIndex) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StatementIndexMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StatementIndexMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.StatementIndex, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StatementIndexMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StatementIndexMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (StatementIndex).
func (m *StatementIndexMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StatementIndexMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.object != nil {
		fields = append(fields, statementindex.FieldObject)
	}
	if m.predicate != nil {
		fields = append(fields, statementindex.FieldPredicate)
	}
	if m.subject != nil {
		fields = append(fields, statementindex.FieldSubject)
	}
	if m.statement != nil {
		fields = append(fields, statementindex.FieldStatement)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StatementIndexMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case statementindex.FieldObject:
		return m.Object()
	case statementindex.FieldPredicate:
		return m.Predicate()
	case statementindex.FieldSubject:
		return m.Subject()
	case statementindex.FieldStatement:
		return m.Statement()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StatementIndexMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case statementindex.FieldObject:
		return m.OldObject(ctx)
	case statementindex.FieldPredicate:
		return m.OldPredicate(ctx)
	case statementindex.FieldSubject:
		return m.OldSubject(ctx)
	case statementindex.FieldStatement:
		return m.OldStatement(ctx)
	}
	return nil, fmt.Errorf("unknown StatementIndex field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatementIndexMutation) SetField(name string, value ent.Value) error {
	switch name {
	case statementindex.FieldObject:
		v, ok := value.(schema.Object)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObject(v)
		return nil
	case statementindex.FieldPredicate:
		v, ok := value.(schema.Predicate)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPredicate(v)
		return nil
	case statementindex.FieldSubject:
		v, ok := value.(schema.Subject)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case statementindex.FieldStatement:
		v, ok := value.(schema.Location)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatement(v)
		return nil
	}
	return fmt.Errorf("unknown StatementIndex field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StatementIndexMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StatementIndexMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatementIndexMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StatementIndex numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StatementIndexMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StatementIndexMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatementIndexMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StatementIndex nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StatementIndexMutation) ResetField(name string) error {
	switch name {
	case statementindex.FieldObject:
		m.ResetObject()
		return nil
	case statementindex.FieldPredicate:
		m.ResetPredicate()
		return nil
	case statementindex.FieldSubject:
		m.ResetSubject()
		return nil
	case statementindex.FieldStatement:
		m.ResetStatement()
		return nil
	}
	return fmt.Errorf("unknown StatementIndex field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StatementIndexMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StatementIndexMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StatementIndexMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StatementIndexMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StatementIndexMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StatementIndexMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StatementIndexMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown StatementIndex unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StatementIndexMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown StatementIndex edge %s", name)
}
