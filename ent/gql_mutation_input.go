// Code generated by ent, DO NOT EDIT.

package ent

// CreateElementInput represents a mutation input for creating elements.
type CreateElementInput struct {
	ResourceType string
	LocatorType  string
	StatementIDs []int
	ResourceIDs  []int
	LocationIDs  []int
}

// Mutate applies the CreateElementInput on the ElementMutation builder.
func (i *CreateElementInput) Mutate(m *ElementMutation) {
	m.SetResourceType(i.ResourceType)
	m.SetLocatorType(i.LocatorType)
	if v := i.StatementIDs; len(v) > 0 {
		m.AddStatementIDs(v...)
	}
	if v := i.ResourceIDs; len(v) > 0 {
		m.AddResourceIDs(v...)
	}
	if v := i.LocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateElementInput on the ElementCreate builder.
func (c *ElementCreate) SetInput(i CreateElementInput) *ElementCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateResourceInput represents a mutation input for creating resources.
type CreateResourceInput struct {
	Message    *map[string]interface{}
	ElementIDs []int
}

// Mutate applies the CreateResourceInput on the ResourceMutation builder.
func (i *CreateResourceInput) Mutate(m *ResourceMutation) {
	if v := i.Message; v != nil {
		m.SetMessage(v)
	}
	if v := i.ElementIDs; len(v) > 0 {
		m.AddElementIDs(v...)
	}
}

// SetInput applies the change-set in the CreateResourceInput on the ResourceCreate builder.
func (c *ResourceCreate) SetInput(i CreateResourceInput) *ResourceCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateStatementInput represents a mutation input for creating statements.
type CreateStatementInput struct {
	MediaType    string
	ObjectIDs    []int
	PredicateIDs []int
	SubjectIDs   []int
	StatementIDs []int
}

// Mutate applies the CreateStatementInput on the StatementMutation builder.
func (i *CreateStatementInput) Mutate(m *StatementMutation) {
	m.SetMediaType(i.MediaType)
	if v := i.ObjectIDs; len(v) > 0 {
		m.AddObjectIDs(v...)
	}
	if v := i.PredicateIDs; len(v) > 0 {
		m.AddPredicateIDs(v...)
	}
	if v := i.SubjectIDs; len(v) > 0 {
		m.AddSubjectIDs(v...)
	}
	if v := i.StatementIDs; len(v) > 0 {
		m.AddStatementIDs(v...)
	}
}

// SetInput applies the change-set in the CreateStatementInput on the StatementCreate builder.
func (c *StatementCreate) SetInput(i CreateStatementInput) *StatementCreate {
	i.Mutate(c.Mutation())
	return c
}
