// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"zotregistry.io/zot/ent/object"
)

// Object is the model entity for the Object schema.
type Object struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ObjectType holds the value of the "objectType" field.
	ObjectType string `json:"objectType,omitempty"`
	// Object holds the value of the "object" field.
	Object map[string]interface{} `json:"object,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ObjectQuery when eager-loading is set.
	Edges        ObjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ObjectEdges holds the relations/edges for other nodes in the graph.
type ObjectEdges struct {
	// Statement holds the value of the statement edge.
	Statement []*Statement `json:"statement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedStatement map[string][]*Statement
}

// StatementOrErr returns the Statement value or an error if the edge
// was not loaded in eager-loading.
func (e ObjectEdges) StatementOrErr() ([]*Statement, error) {
	if e.loadedTypes[0] {
		return e.Statement, nil
	}
	return nil, &NotLoadedError{edge: "statement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Object) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case object.FieldObject:
			values[i] = new([]byte)
		case object.FieldID:
			values[i] = new(sql.NullInt64)
		case object.FieldObjectType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Object fields.
func (o *Object) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case object.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case object.FieldObjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field objectType", values[i])
			} else if value.Valid {
				o.ObjectType = value.String
			}
		case object.FieldObject:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field object", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.Object); err != nil {
					return fmt.Errorf("unmarshal field object: %w", err)
				}
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Object.
// This includes values selected through modifiers, order, etc.
func (o *Object) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryStatement queries the "statement" edge of the Object entity.
func (o *Object) QueryStatement() *StatementQuery {
	return NewObjectClient(o.config).QueryStatement(o)
}

// Update returns a builder for updating this Object.
// Note that you need to call Object.Unwrap() before calling this method if this Object
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Object) Update() *ObjectUpdateOne {
	return NewObjectClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Object entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Object) Unwrap() *Object {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Object is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Object) String() string {
	var builder strings.Builder
	builder.WriteString("Object(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("objectType=")
	builder.WriteString(o.ObjectType)
	builder.WriteString(", ")
	builder.WriteString("object=")
	builder.WriteString(fmt.Sprintf("%v", o.Object))
	builder.WriteByte(')')
	return builder.String()
}

// NamedStatement returns the Statement named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Object) NamedStatement(name string) ([]*Statement, error) {
	if o.Edges.namedStatement == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedStatement[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Object) appendNamedStatement(name string, edges ...*Statement) {
	if o.Edges.namedStatement == nil {
		o.Edges.namedStatement = make(map[string][]*Statement)
	}
	if len(edges) == 0 {
		o.Edges.namedStatement[name] = []*Statement{}
	} else {
		o.Edges.namedStatement[name] = append(o.Edges.namedStatement[name], edges...)
	}
}

// Objects is a parsable slice of Object.
type Objects []*Object
