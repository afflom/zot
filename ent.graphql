directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateObjectInput is used for create Object object.
Input was generated by ent.
"""
input CreateObjectInput {
  objecttype: String!
  object: Map!
  statementIDs: [ID!]
}
"""
CreateSpredicateInput is used for create Spredicate object.
Input was generated by ent.
"""
input CreateSpredicateInput {
  predicatetype: String!
  predicate: Map!
  statementIDs: [ID!]
}
"""
CreateStatementInput is used for create Statement object.
Input was generated by ent.
"""
input CreateStatementInput {
  namespace: String!
  statement: Map!
  objectIDs: [ID!]
  predicateIDs: [ID!]
  subjectIDs: [ID!]
}
"""
CreateSubjectInput is used for create Subject object.
Input was generated by ent.
"""
input CreateSubjectInput {
  subjecttype: String!
  subject: Map!
  statementIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""The builtin Map type"""
scalar Map
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "zotregistry.io/zot/ent.Noder") {
  """The id of the object."""
  id: ID!
}
type Object implements Node {
  id: ID!
  objecttype: String! @goField(name: "ObjectType", forceResolver: false)
  object: Map!
  statement: [Statement!]
}
"""
ObjectWhereInput is used for filtering Object objects.
Input was generated by ent.
"""
input ObjectWhereInput {
  not: ObjectWhereInput
  and: [ObjectWhereInput!]
  or: [ObjectWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """objectType field predicates"""
  objecttype: String
  objecttypeNEQ: String
  objecttypeIn: [String!]
  objecttypeNotIn: [String!]
  objecttypeGT: String
  objecttypeGTE: String
  objecttypeLT: String
  objecttypeLTE: String
  objecttypeContains: String
  objecttypeHasPrefix: String
  objecttypeHasSuffix: String
  objecttypeEqualFold: String
  objecttypeContainsFold: String
  """statement edge predicates"""
  hasStatement: Boolean
  hasStatementWith: [StatementWhereInput!]
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  objects: [Object!]!
  spredicates: [Spredicate!]!
  statements: [Statement!]!
  subjects: [Subject!]!
}
type Spredicate implements Node {
  id: ID!
  predicatetype: String! @goField(name: "PredicateType", forceResolver: false)
  predicate: Map!
  statement: [Statement!]
}
"""
SpredicateWhereInput is used for filtering Spredicate objects.
Input was generated by ent.
"""
input SpredicateWhereInput {
  not: SpredicateWhereInput
  and: [SpredicateWhereInput!]
  or: [SpredicateWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """predicateType field predicates"""
  predicatetype: String
  predicatetypeNEQ: String
  predicatetypeIn: [String!]
  predicatetypeNotIn: [String!]
  predicatetypeGT: String
  predicatetypeGTE: String
  predicatetypeLT: String
  predicatetypeLTE: String
  predicatetypeContains: String
  predicatetypeHasPrefix: String
  predicatetypeHasSuffix: String
  predicatetypeEqualFold: String
  predicatetypeContainsFold: String
  """statement edge predicates"""
  hasStatement: Boolean
  hasStatementWith: [StatementWhereInput!]
}
type Statement implements Node {
  id: ID!
  namespace: String!
  statement: Map!
  objects: [Object!]
  predicates: [Spredicate!]
  subjects: [Subject!]
}
"""
StatementWhereInput is used for filtering Statement objects.
Input was generated by ent.
"""
input StatementWhereInput {
  not: StatementWhereInput
  and: [StatementWhereInput!]
  or: [StatementWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """namespace field predicates"""
  namespace: String
  namespaceNEQ: String
  namespaceIn: [String!]
  namespaceNotIn: [String!]
  namespaceGT: String
  namespaceGTE: String
  namespaceLT: String
  namespaceLTE: String
  namespaceContains: String
  namespaceHasPrefix: String
  namespaceHasSuffix: String
  namespaceEqualFold: String
  namespaceContainsFold: String
  """objects edge predicates"""
  hasObjects: Boolean
  hasObjectsWith: [ObjectWhereInput!]
  """predicates edge predicates"""
  hasPredicates: Boolean
  hasPredicatesWith: [SpredicateWhereInput!]
  """subjects edge predicates"""
  hasSubjects: Boolean
  hasSubjectsWith: [SubjectWhereInput!]
}
type Subject implements Node {
  id: ID!
  subjecttype: String! @goField(name: "SubjectType", forceResolver: false)
  subject: Map!
  statement: [Statement!]
}
"""
SubjectWhereInput is used for filtering Subject objects.
Input was generated by ent.
"""
input SubjectWhereInput {
  not: SubjectWhereInput
  and: [SubjectWhereInput!]
  or: [SubjectWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """subjectType field predicates"""
  subjecttype: String
  subjecttypeNEQ: String
  subjecttypeIn: [String!]
  subjecttypeNotIn: [String!]
  subjecttypeGT: String
  subjecttypeGTE: String
  subjecttypeLT: String
  subjecttypeLTE: String
  subjecttypeContains: String
  subjecttypeHasPrefix: String
  subjecttypeHasSuffix: String
  subjecttypeEqualFold: String
  subjecttypeContainsFold: String
  """statement edge predicates"""
  hasStatement: Boolean
  hasStatementWith: [StatementWhereInput!]
}
