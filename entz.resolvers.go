package zot

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"zotregistry.io/zot/ent"
)

func (r *queryResolver) Statementsq(ctx context.Context, jsonPath *string, jsonValue *string) ([]*ent.Statement, error) {
	fmt.Println("statementsq called")
	// Query all statements from the database
	query := r.client.Statement.Query()

	// Apply custom predicates if needed
	if jsonPath != nil && jsonValue != nil {
		predicate := StatementHasJSONValue("statement", *jsonPath, *jsonValue)
		query.Where(predicate) // Use the custom predicate directly
	}

	statements, err := query.All(ctx)
	if err != nil {
		return nil, err
	}

	return statements, nil
}

// JSONPath is the resolver for the jsonPath field.
func (r *statementWhereInputResolver) JSONPath(ctx context.Context, obj *ent.StatementWhereInput, data *string) error {
	cctx := ctx.(*CustomContext)
	cctx.JsonPath = data
	return nil
}

// JSONValue is the resolver for the jsonValue field.
func (r *statementWhereInputResolver) JSONValue(ctx context.Context, obj *ent.StatementWhereInput, data *string) error {
	cctx := ctx.(*CustomContext)
	cctx.JsonValue = data
	return nil
}
