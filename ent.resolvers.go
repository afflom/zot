package zot

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"zotregistry.io/zot/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// Objects is the resolver for the objects field.
func (r *queryResolver) Objects(ctx context.Context) ([]*ent.Object, error) {
	return r.client.Object.Query().All(ctx)
}

// Spredicates is the resolver for the spredicates field.
func (r *queryResolver) Spredicates(ctx context.Context) ([]*ent.Spredicate, error) {
	return r.client.Spredicate.Query().All(ctx)
}

// Statements is the resolver for the statements field.
func (r *queryResolver) Statements(ctx context.Context) ([]*ent.Statement, error) {
	return r.client.Statement.Query().All(ctx)
}

// Subjects is the resolver for the subjects field.
func (r *queryResolver) Subjects(ctx context.Context) ([]*ent.Subject, error) {
	return r.client.Subject.Query().All(ctx)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
